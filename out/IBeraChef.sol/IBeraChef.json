{"abi":[{"type":"function","name":"activateQueuedValCommission","inputs":[{"name":"valPubkey","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"activateReadyQueuedRewardAllocation","inputs":[{"name":"valPubkey","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"getActiveRewardAllocation","inputs":[{"name":"valPubkey","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"","type":"tuple","internalType":"struct IBeraChef.RewardAllocation","components":[{"name":"startBlock","type":"uint64","internalType":"uint64"},{"name":"weights","type":"tuple[]","internalType":"struct IBeraChef.Weight[]","components":[{"name":"receiver","type":"address","internalType":"address"},{"name":"percentageNumerator","type":"uint96","internalType":"uint96"}]}]}],"stateMutability":"view"},{"type":"function","name":"getDefaultRewardAllocation","inputs":[],"outputs":[{"name":"","type":"tuple","internalType":"struct IBeraChef.RewardAllocation","components":[{"name":"startBlock","type":"uint64","internalType":"uint64"},{"name":"weights","type":"tuple[]","internalType":"struct IBeraChef.Weight[]","components":[{"name":"receiver","type":"address","internalType":"address"},{"name":"percentageNumerator","type":"uint96","internalType":"uint96"}]}]}],"stateMutability":"view"},{"type":"function","name":"getQueuedRewardAllocation","inputs":[{"name":"valPubkey","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"","type":"tuple","internalType":"struct IBeraChef.RewardAllocation","components":[{"name":"startBlock","type":"uint64","internalType":"uint64"},{"name":"weights","type":"tuple[]","internalType":"struct IBeraChef.Weight[]","components":[{"name":"receiver","type":"address","internalType":"address"},{"name":"percentageNumerator","type":"uint96","internalType":"uint96"}]}]}],"stateMutability":"view"},{"type":"function","name":"getSetActiveRewardAllocation","inputs":[{"name":"valPubkey","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"","type":"tuple","internalType":"struct IBeraChef.RewardAllocation","components":[{"name":"startBlock","type":"uint64","internalType":"uint64"},{"name":"weights","type":"tuple[]","internalType":"struct IBeraChef.Weight[]","components":[{"name":"receiver","type":"address","internalType":"address"},{"name":"percentageNumerator","type":"uint96","internalType":"uint96"}]}]}],"stateMutability":"view"},{"type":"function","name":"getValCommissionOnIncentiveTokens","inputs":[{"name":"valPubkey","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"","type":"uint96","internalType":"uint96"}],"stateMutability":"view"},{"type":"function","name":"getValQueuedCommissionOnIncentiveTokens","inputs":[{"name":"valPubkey","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"","type":"tuple","internalType":"struct IBeraChef.QueuedCommissionRateChange","components":[{"name":"blockNumberLast","type":"uint32","internalType":"uint32"},{"name":"commissionRate","type":"uint96","internalType":"uint96"}]}],"stateMutability":"view"},{"type":"function","name":"getValidatorIncentiveTokenShare","inputs":[{"name":"valPubkey","type":"bytes","internalType":"bytes"},{"name":"incentiveTokenAmount","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"isQueuedRewardAllocationReady","inputs":[{"name":"valPubkey","type":"bytes","internalType":"bytes"},{"name":"blockNumber","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"isReady","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"queueNewRewardAllocation","inputs":[{"name":"valPubkey","type":"bytes","internalType":"bytes"},{"name":"startBlock","type":"uint64","internalType":"uint64"},{"name":"weights","type":"tuple[]","internalType":"struct IBeraChef.Weight[]","components":[{"name":"receiver","type":"address","internalType":"address"},{"name":"percentageNumerator","type":"uint96","internalType":"uint96"}]}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"queueValCommission","inputs":[{"name":"valPubkey","type":"bytes","internalType":"bytes"},{"name":"commissionRate","type":"uint96","internalType":"uint96"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setCommissionChangeDelay","inputs":[{"name":"_commissionChangeDelay","type":"uint64","internalType":"uint64"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setDefaultRewardAllocation","inputs":[{"name":"rewardAllocation","type":"tuple","internalType":"struct IBeraChef.RewardAllocation","components":[{"name":"startBlock","type":"uint64","internalType":"uint64"},{"name":"weights","type":"tuple[]","internalType":"struct IBeraChef.Weight[]","components":[{"name":"receiver","type":"address","internalType":"address"},{"name":"percentageNumerator","type":"uint96","internalType":"uint96"}]}]}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setMaxNumWeightsPerRewardAllocation","inputs":[{"name":"_maxNumWeightsPerRewardAllocation","type":"uint8","internalType":"uint8"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setMaxWeightPerVault","inputs":[{"name":"_maxWeightPerVault","type":"uint96","internalType":"uint96"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setRewardAllocationBlockDelay","inputs":[{"name":"_rewardAllocationBlockDelay","type":"uint64","internalType":"uint64"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setVaultWhitelistedStatus","inputs":[{"name":"receiver","type":"address","internalType":"address"},{"name":"isWhitelisted","type":"bool","internalType":"bool"},{"name":"metadata","type":"string","internalType":"string"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"updateWhitelistedVaultMetadata","inputs":[{"name":"receiver","type":"address","internalType":"address"},{"name":"metadata","type":"string","internalType":"string"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"event","name":"ActivateRewardAllocation","inputs":[{"name":"valPubkey","type":"bytes","indexed":true,"internalType":"bytes"},{"name":"startBlock","type":"uint64","indexed":false,"internalType":"uint64"},{"name":"weights","type":"tuple[]","indexed":false,"internalType":"struct IBeraChef.Weight[]","components":[{"name":"receiver","type":"address","internalType":"address"},{"name":"percentageNumerator","type":"uint96","internalType":"uint96"}]}],"anonymous":false},{"type":"event","name":"CommissionChangeDelaySet","inputs":[{"name":"commissionChangeDelay","type":"uint64","indexed":false,"internalType":"uint64"}],"anonymous":false},{"type":"event","name":"MaxNumWeightsPerRewardAllocationSet","inputs":[{"name":"maxNumWeightsPerRewardAllocation","type":"uint8","indexed":false,"internalType":"uint8"}],"anonymous":false},{"type":"event","name":"MaxWeightPerVaultSet","inputs":[{"name":"maxWeightPerVault","type":"uint96","indexed":false,"internalType":"uint96"}],"anonymous":false},{"type":"event","name":"QueueRewardAllocation","inputs":[{"name":"valPubkey","type":"bytes","indexed":true,"internalType":"bytes"},{"name":"startBlock","type":"uint64","indexed":false,"internalType":"uint64"},{"name":"weights","type":"tuple[]","indexed":false,"internalType":"struct IBeraChef.Weight[]","components":[{"name":"receiver","type":"address","internalType":"address"},{"name":"percentageNumerator","type":"uint96","internalType":"uint96"}]}],"anonymous":false},{"type":"event","name":"QueuedValCommission","inputs":[{"name":"valPubkey","type":"bytes","indexed":true,"internalType":"bytes"},{"name":"queuedCommissionRate","type":"uint96","indexed":false,"internalType":"uint96"}],"anonymous":false},{"type":"event","name":"RewardAllocationBlockDelaySet","inputs":[{"name":"rewardAllocationBlockDelay","type":"uint64","indexed":false,"internalType":"uint64"}],"anonymous":false},{"type":"event","name":"SetDefaultRewardAllocation","inputs":[{"name":"rewardAllocation","type":"tuple","indexed":false,"internalType":"struct IBeraChef.RewardAllocation","components":[{"name":"startBlock","type":"uint64","internalType":"uint64"},{"name":"weights","type":"tuple[]","internalType":"struct IBeraChef.Weight[]","components":[{"name":"receiver","type":"address","internalType":"address"},{"name":"percentageNumerator","type":"uint96","internalType":"uint96"}]}]}],"anonymous":false},{"type":"event","name":"ValCommissionSet","inputs":[{"name":"valPubkey","type":"bytes","indexed":true,"internalType":"bytes"},{"name":"oldCommissionRate","type":"uint96","indexed":false,"internalType":"uint96"},{"name":"newCommissionRate","type":"uint96","indexed":false,"internalType":"uint96"}],"anonymous":false},{"type":"event","name":"VaultWhitelistedStatusUpdated","inputs":[{"name":"receiver","type":"address","indexed":true,"internalType":"address"},{"name":"isWhitelisted","type":"bool","indexed":true,"internalType":"bool"},{"name":"metadata","type":"string","indexed":false,"internalType":"string"}],"anonymous":false},{"type":"event","name":"WhitelistedVaultMetadataUpdated","inputs":[{"name":"receiver","type":"address","indexed":true,"internalType":"address"},{"name":"metadata","type":"string","indexed":false,"internalType":"string"}],"anonymous":false},{"type":"error","name":"AmountLessThanMinIncentiveRate","inputs":[]},{"type":"error","name":"CannotRecoverIncentiveToken","inputs":[]},{"type":"error","name":"CannotRecoverRewardToken","inputs":[]},{"type":"error","name":"CannotRecoverStakingToken","inputs":[]},{"type":"error","name":"CommissionChangeAlreadyQueued","inputs":[]},{"type":"error","name":"CommissionNotQueuedOrDelayNotPassed","inputs":[]},{"type":"error","name":"DepositNotMultipleOfGwei","inputs":[]},{"type":"error","name":"DepositValueTooHigh","inputs":[]},{"type":"error","name":"DonateAmountLessThanPayoutAmount","inputs":[]},{"type":"error","name":"IncentiveRateTooHigh","inputs":[]},{"type":"error","name":"IndexOutOfRange","inputs":[]},{"type":"error","name":"InsolventReward","inputs":[]},{"type":"error","name":"InsufficientDelegateStake","inputs":[]},{"type":"error","name":"InsufficientDeposit","inputs":[]},{"type":"error","name":"InsufficientIncentiveTokens","inputs":[]},{"type":"error","name":"InsufficientSelfStake","inputs":[]},{"type":"error","name":"InsufficientStake","inputs":[]},{"type":"error","name":"InvalidActivateBoostDelay","inputs":[]},{"type":"error","name":"InvalidArray","inputs":[]},{"type":"error","name":"InvalidBaseRate","inputs":[]},{"type":"error","name":"InvalidBoostMultiplier","inputs":[]},{"type":"error","name":"InvalidCommissionChangeDelay","inputs":[]},{"type":"error","name":"InvalidCommissionValue","inputs":[]},{"type":"error","name":"InvalidCredentialsLength","inputs":[]},{"type":"error","name":"InvalidDistribution","inputs":[]},{"type":"error","name":"InvalidDropBoostDelay","inputs":[]},{"type":"error","name":"InvalidIncentiveRate","inputs":[]},{"type":"error","name":"InvalidMaxIncentiveTokensCount","inputs":[]},{"type":"error","name":"InvalidMaxWeightPerVault","inputs":[]},{"type":"error","name":"InvalidMerkleRoot","inputs":[]},{"type":"error","name":"InvalidMinBoostedRewardRate","inputs":[]},{"type":"error","name":"InvalidProof","inputs":[]},{"type":"error","name":"InvalidPubKeyLength","inputs":[]},{"type":"error","name":"InvalidRewardAllocationWeights","inputs":[]},{"type":"error","name":"InvalidRewardClaimDelay","inputs":[]},{"type":"error","name":"InvalidRewardConvexity","inputs":[]},{"type":"error","name":"InvalidRewardRate","inputs":[]},{"type":"error","name":"InvalidSignatureLength","inputs":[]},{"type":"error","name":"InvalidStartBlock","inputs":[]},{"type":"error","name":"InvalidToken","inputs":[]},{"type":"error","name":"InvalidWeight","inputs":[]},{"type":"error","name":"InvalidateDefaultRewardAllocation","inputs":[]},{"type":"error","name":"InvariantCheckFailed","inputs":[]},{"type":"error","name":"MaxNumWeightsPerRewardAllocationIsZero","inputs":[]},{"type":"error","name":"MinIncentiveRateIsZero","inputs":[]},{"type":"error","name":"NotAContract","inputs":[]},{"type":"error","name":"NotApprovedSender","inputs":[]},{"type":"error","name":"NotBGT","inputs":[]},{"type":"error","name":"NotBlockRewardController","inputs":[]},{"type":"error","name":"NotDelegate","inputs":[]},{"type":"error","name":"NotDistributor","inputs":[]},{"type":"error","name":"NotEnoughBalance","inputs":[]},{"type":"error","name":"NotEnoughBoostedBalance","inputs":[]},{"type":"error","name":"NotEnoughTime","inputs":[]},{"type":"error","name":"NotFactoryVault","inputs":[]},{"type":"error","name":"NotFeeCollector","inputs":[]},{"type":"error","name":"NotIncentiveManager","inputs":[]},{"type":"error","name":"NotNewOperator","inputs":[]},{"type":"error","name":"NotOperator","inputs":[]},{"type":"error","name":"NotWhitelistedVault","inputs":[]},{"type":"error","name":"OperatorAlreadySet","inputs":[]},{"type":"error","name":"PayoutAmountIsZero","inputs":[]},{"type":"error","name":"RewardAllocationAlreadyQueued","inputs":[]},{"type":"error","name":"RewardAllocationBlockDelayTooLarge","inputs":[]},{"type":"error","name":"RewardCycleNotEnded","inputs":[]},{"type":"error","name":"RewardInactive","inputs":[]},{"type":"error","name":"RewardsDurationIsZero","inputs":[]},{"type":"error","name":"StakeAmountIsZero","inputs":[]},{"type":"error","name":"TimestampAlreadyProcessed","inputs":[]},{"type":"error","name":"TokenAlreadyWhitelistedOrLimitReached","inputs":[]},{"type":"error","name":"TokenNotWhitelisted","inputs":[]},{"type":"error","name":"TooManyWeights","inputs":[]},{"type":"error","name":"TotalSupplyOverflow","inputs":[]},{"type":"error","name":"WithdrawAmountIsZero","inputs":[]},{"type":"error","name":"ZeroAddress","inputs":[]},{"type":"error","name":"ZeroOperatorOnFirstDeposit","inputs":[]},{"type":"error","name":"ZeroPercentageWeight","inputs":[]}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"activateQueuedValCommission(bytes)":"37e4c5bf","activateReadyQueuedRewardAllocation(bytes)":"6ed0bf9a","getActiveRewardAllocation(bytes)":"da6f7563","getDefaultRewardAllocation()":"17dbf270","getQueuedRewardAllocation(bytes)":"4ecbf5c0","getSetActiveRewardAllocation(bytes)":"230288ce","getValCommissionOnIncentiveTokens(bytes)":"61b8b560","getValQueuedCommissionOnIncentiveTokens(bytes)":"a83f0817","getValidatorIncentiveTokenShare(bytes,uint256)":"3909cbd5","isQueuedRewardAllocationReady(bytes,uint256)":"722f8e0a","isReady()":"a094a031","queueNewRewardAllocation(bytes,uint64,(address,uint96)[])":"e5eb90aa","queueValCommission(bytes,uint96)":"8f7e0f0b","setCommissionChangeDelay(uint64)":"7239e8ca","setDefaultRewardAllocation((uint64,(address,uint96)[]))":"c89f2665","setMaxNumWeightsPerRewardAllocation(uint8)":"66204c78","setMaxWeightPerVault(uint96)":"25fb3c42","setRewardAllocationBlockDelay(uint64)":"9ca2626c","setVaultWhitelistedStatus(address,bool,string)":"fb9f6fde","updateWhitelistedVaultMetadata(address,string)":"69ed1708"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AmountLessThanMinIncentiveRate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotRecoverIncentiveToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotRecoverRewardToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotRecoverStakingToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CommissionChangeAlreadyQueued\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CommissionNotQueuedOrDelayNotPassed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DepositNotMultipleOfGwei\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DepositValueTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DonateAmountLessThanPayoutAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncentiveRateTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IndexOutOfRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsolventReward\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientDelegateStake\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientDeposit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientIncentiveTokens\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientSelfStake\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientStake\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidActivateBoostDelay\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidArray\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBaseRate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBoostMultiplier\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCommissionChangeDelay\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCommissionValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCredentialsLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDistribution\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDropBoostDelay\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidIncentiveRate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMaxIncentiveTokensCount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMaxWeightPerVault\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMerkleRoot\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMinBoostedRewardRate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidProof\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPubKeyLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRewardAllocationWeights\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRewardClaimDelay\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRewardConvexity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRewardRate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStartBlock\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidWeight\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidateDefaultRewardAllocation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvariantCheckFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxNumWeightsPerRewardAllocationIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MinIncentiveRateIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotApprovedSender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotBGT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotBlockRewardController\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotDelegate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotDistributor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughBoostedBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughTime\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotFactoryVault\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotFeeCollector\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotIncentiveManager\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotNewOperator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOperator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotWhitelistedVault\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OperatorAlreadySet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PayoutAmountIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardAllocationAlreadyQueued\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardAllocationBlockDelayTooLarge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardCycleNotEnded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardInactive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardsDurationIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakeAmountIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TimestampAlreadyProcessed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenAlreadyWhitelistedOrLimitReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenNotWhitelisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooManyWeights\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TotalSupplyOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawAmountIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroOperatorOnFirstDeposit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroPercentageWeight\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"valPubkey\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"startBlock\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"percentageNumerator\",\"type\":\"uint96\"}],\"indexed\":false,\"internalType\":\"struct IBeraChef.Weight[]\",\"name\":\"weights\",\"type\":\"tuple[]\"}],\"name\":\"ActivateRewardAllocation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"commissionChangeDelay\",\"type\":\"uint64\"}],\"name\":\"CommissionChangeDelaySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"maxNumWeightsPerRewardAllocation\",\"type\":\"uint8\"}],\"name\":\"MaxNumWeightsPerRewardAllocationSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"maxWeightPerVault\",\"type\":\"uint96\"}],\"name\":\"MaxWeightPerVaultSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"valPubkey\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"startBlock\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"percentageNumerator\",\"type\":\"uint96\"}],\"indexed\":false,\"internalType\":\"struct IBeraChef.Weight[]\",\"name\":\"weights\",\"type\":\"tuple[]\"}],\"name\":\"QueueRewardAllocation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"valPubkey\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"queuedCommissionRate\",\"type\":\"uint96\"}],\"name\":\"QueuedValCommission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"rewardAllocationBlockDelay\",\"type\":\"uint64\"}],\"name\":\"RewardAllocationBlockDelaySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"startBlock\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"percentageNumerator\",\"type\":\"uint96\"}],\"internalType\":\"struct IBeraChef.Weight[]\",\"name\":\"weights\",\"type\":\"tuple[]\"}],\"indexed\":false,\"internalType\":\"struct IBeraChef.RewardAllocation\",\"name\":\"rewardAllocation\",\"type\":\"tuple\"}],\"name\":\"SetDefaultRewardAllocation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"valPubkey\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"oldCommissionRate\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"newCommissionRate\",\"type\":\"uint96\"}],\"name\":\"ValCommissionSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isWhitelisted\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"VaultWhitelistedStatusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"WhitelistedVaultMetadataUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"valPubkey\",\"type\":\"bytes\"}],\"name\":\"activateQueuedValCommission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"valPubkey\",\"type\":\"bytes\"}],\"name\":\"activateReadyQueuedRewardAllocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"valPubkey\",\"type\":\"bytes\"}],\"name\":\"getActiveRewardAllocation\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"startBlock\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"percentageNumerator\",\"type\":\"uint96\"}],\"internalType\":\"struct IBeraChef.Weight[]\",\"name\":\"weights\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IBeraChef.RewardAllocation\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDefaultRewardAllocation\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"startBlock\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"percentageNumerator\",\"type\":\"uint96\"}],\"internalType\":\"struct IBeraChef.Weight[]\",\"name\":\"weights\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IBeraChef.RewardAllocation\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"valPubkey\",\"type\":\"bytes\"}],\"name\":\"getQueuedRewardAllocation\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"startBlock\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"percentageNumerator\",\"type\":\"uint96\"}],\"internalType\":\"struct IBeraChef.Weight[]\",\"name\":\"weights\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IBeraChef.RewardAllocation\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"valPubkey\",\"type\":\"bytes\"}],\"name\":\"getSetActiveRewardAllocation\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"startBlock\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"percentageNumerator\",\"type\":\"uint96\"}],\"internalType\":\"struct IBeraChef.Weight[]\",\"name\":\"weights\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IBeraChef.RewardAllocation\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"valPubkey\",\"type\":\"bytes\"}],\"name\":\"getValCommissionOnIncentiveTokens\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"valPubkey\",\"type\":\"bytes\"}],\"name\":\"getValQueuedCommissionOnIncentiveTokens\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"blockNumberLast\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"commissionRate\",\"type\":\"uint96\"}],\"internalType\":\"struct IBeraChef.QueuedCommissionRateChange\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"valPubkey\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"incentiveTokenAmount\",\"type\":\"uint256\"}],\"name\":\"getValidatorIncentiveTokenShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"valPubkey\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"isQueuedRewardAllocationReady\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isReady\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"valPubkey\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"startBlock\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"percentageNumerator\",\"type\":\"uint96\"}],\"internalType\":\"struct IBeraChef.Weight[]\",\"name\":\"weights\",\"type\":\"tuple[]\"}],\"name\":\"queueNewRewardAllocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"valPubkey\",\"type\":\"bytes\"},{\"internalType\":\"uint96\",\"name\":\"commissionRate\",\"type\":\"uint96\"}],\"name\":\"queueValCommission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_commissionChangeDelay\",\"type\":\"uint64\"}],\"name\":\"setCommissionChangeDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"startBlock\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"percentageNumerator\",\"type\":\"uint96\"}],\"internalType\":\"struct IBeraChef.Weight[]\",\"name\":\"weights\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IBeraChef.RewardAllocation\",\"name\":\"rewardAllocation\",\"type\":\"tuple\"}],\"name\":\"setDefaultRewardAllocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_maxNumWeightsPerRewardAllocation\",\"type\":\"uint8\"}],\"name\":\"setMaxNumWeightsPerRewardAllocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"_maxWeightPerVault\",\"type\":\"uint96\"}],\"name\":\"setMaxWeightPerVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_rewardAllocationBlockDelay\",\"type\":\"uint64\"}],\"name\":\"setRewardAllocationBlockDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isWhitelisted\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"setVaultWhitelistedStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"updateWhitelistedVaultMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"DepositNotMultipleOfGwei()\":[{\"details\":\"Error thrown when the deposit amount is not a multiple of Gwei.\"}],\"DepositValueTooHigh()\":[{\"details\":\"Error thrown when the deposit amount is too high, since it is a uint64.\"}],\"InsufficientDeposit()\":[{\"details\":\"Error thrown when the deposit amount is too small, to prevent dust deposits.\"}],\"InvalidCredentialsLength()\":[{\"details\":\"Error thrown when the withdrawal credentials length is not 32 bytes.\"}],\"InvalidPubKeyLength()\":[{\"details\":\"Error thrown when the public key length is not 48 bytes.\"}],\"InvalidSignatureLength()\":[{\"details\":\"Error thrown when the signature length is not 96 bytes.\"}],\"NotNewOperator()\":[{\"details\":\"Error thrown when the caller is not the current operator.\"}],\"OperatorAlreadySet()\":[{\"details\":\"Error thrown when the operator is already set and caller passed non-zero operator.\"}],\"ZeroOperatorOnFirstDeposit()\":[{\"details\":\"Error thrown when the input operator is zero address on the first deposit.\"}]},\"events\":{\"ActivateRewardAllocation(bytes,uint64,(address,uint96)[])\":{\"params\":{\"startBlock\":\"The block that the reward allocation goes into effect.\",\"valPubkey\":\"The validator's pubkey.\",\"weights\":\"The weights of the reward allocation.\"}},\"CommissionChangeDelaySet(uint64)\":{\"params\":{\"commissionChangeDelay\":\"The delay in blocks to activate a queued commission change.\"}},\"MaxNumWeightsPerRewardAllocationSet(uint8)\":{\"params\":{\"maxNumWeightsPerRewardAllocation\":\"The maximum number of weights per reward allocation.\"}},\"MaxWeightPerVaultSet(uint96)\":{\"params\":{\"maxWeightPerVault\":\"The maximum weight per vault (in basis points).\"}},\"QueueRewardAllocation(bytes,uint64,(address,uint96)[])\":{\"params\":{\"startBlock\":\"The block that the reward allocation goes into effect.\",\"valPubkey\":\"The validator's pubkey.\",\"weights\":\"The weights of the reward allocation.\"}},\"QueuedValCommission(bytes,uint96)\":{\"params\":{\"queuedCommissionRate\":\"The queued commission rate of the validator on the incentive tokens.\",\"valPubkey\":\"The validator's pubkey.\"}},\"RewardAllocationBlockDelaySet(uint64)\":{\"params\":{\"rewardAllocationBlockDelay\":\"The delay in blocks before a new reward allocation can go into effect.\"}},\"SetDefaultRewardAllocation((uint64,(address,uint96)[]))\":{\"params\":{\"rewardAllocation\":\"The default reward allocation.\"}},\"ValCommissionSet(bytes,uint96,uint96)\":{\"params\":{\"newCommissionRate\":\"The new commission rate of the validator on the incentive tokens.\",\"oldCommissionRate\":\"The old commission rate of the validator on the incentive tokens.\",\"valPubkey\":\"The validator's pubkey.\"}},\"VaultWhitelistedStatusUpdated(address,bool,string)\":{\"params\":{\"isWhitelisted\":\"The whitelist status; true if the receiver is being whitelisted, false otherwise.\",\"metadata\":\"The metadata of the vault.\",\"receiver\":\"The address to remove or add as whitelisted vault.\"}},\"WhitelistedVaultMetadataUpdated(address,string)\":{\"params\":{\"metadata\":\"The metadata of the vault.\",\"receiver\":\"The address of the whitelisted vault.\"}}},\"kind\":\"dev\",\"methods\":{\"activateQueuedValCommission(bytes)\":{\"params\":{\"valPubkey\":\"The validator's pubkey.\"}},\"activateReadyQueuedRewardAllocation(bytes)\":{\"details\":\"Should be called by the distribution contract.\",\"params\":{\"valPubkey\":\"The validator's pubkey.\"}},\"getActiveRewardAllocation(bytes)\":{\"params\":{\"valPubkey\":\"The validator's pubkey.\"},\"returns\":{\"_0\":\"rewardAllocation The active reward allocation.\"}},\"getDefaultRewardAllocation()\":{\"returns\":{\"_0\":\"rewardAllocation The default reward allocation.\"}},\"getQueuedRewardAllocation(bytes)\":{\"params\":{\"valPubkey\":\"The validator's pubkey.\"},\"returns\":{\"_0\":\"rewardAllocation The queued reward allocation.\"}},\"getSetActiveRewardAllocation(bytes)\":{\"details\":\"This will return active reward allocation set by validators even if its not valid.\",\"params\":{\"valPubkey\":\"The validator's pubkey.\"},\"returns\":{\"_0\":\"rewardAllocation The reward allocation.\"}},\"getValCommissionOnIncentiveTokens(bytes)\":{\"details\":\"Default commission rate is 5% if the commission was never set.\",\"params\":{\"valPubkey\":\"The validator's pubkey.\"},\"returns\":{\"_0\":\"commissionRate The commission rate of the validator on the incentive tokens.\"}},\"getValQueuedCommissionOnIncentiveTokens(bytes)\":{\"params\":{\"valPubkey\":\"The validator's pubkey.\"},\"returns\":{\"_0\":\"queuedCommissionRate The queued commission struct of the validator on the incentive tokens.\"}},\"getValidatorIncentiveTokenShare(bytes,uint256)\":{\"params\":{\"incentiveTokenAmount\":\"The amount of the incentive tokens.\",\"valPubkey\":\"The validator's pubkey.\"},\"returns\":{\"_0\":\"validatorShare The validator's share of the incentive tokens.\"}},\"isQueuedRewardAllocationReady(bytes,uint256)\":{\"params\":{\"blockNumber\":\"The block number to be queried.\",\"valPubkey\":\"The validator's pubkey.\"},\"returns\":{\"_0\":\"isReady True if the queued reward allocation is ready to be activated, false otherwise.\"}},\"isReady()\":{\"details\":\"This function should be used by all contracts that depend on a system call.This will return false if the governance module has not set a default reward allocation yet.\",\"returns\":{\"_0\":\"isReady True if the BeraChef is ready to be used, false otherwise.\"}},\"queueNewRewardAllocation(bytes,uint64,(address,uint96)[])\":{\"details\":\"The weights of the reward allocation must add up to 100% or 1e4. Only whitelisted pools may be used as well.\",\"params\":{\"startBlock\":\"The block that the reward allocation goes into effect.\",\"valPubkey\":\"The validator's pubkey.\",\"weights\":\"The weights of the reward allocation.\"}},\"queueValCommission(bytes,uint96)\":{\"details\":\"The caller of this function must be the validator operator address.Revert if already a commission rate change is queued.\",\"params\":{\"commissionRate\":\"The commission rate of the validator on the incentive tokens.\",\"valPubkey\":\"The validator's pubkey.\"}},\"setCommissionChangeDelay(uint64)\":{\"details\":\"Only owner can call this function.\",\"params\":{\"_commissionChangeDelay\":\"The delay in blocks to activate a queued commission change.\"}},\"setDefaultRewardAllocation((uint64,(address,uint96)[]))\":{\"details\":\"The caller of this function must be the governance module account.\",\"params\":{\"rewardAllocation\":\"The default reward allocation.\"}},\"setVaultWhitelistedStatus(address,bool,string)\":{\"params\":{\"isWhitelisted\":\"The whitelist status; true if the receiver is being whitelisted, false otherwise.\",\"metadata\":\"The metadata of the vault.\",\"receiver\":\"The address to remove or add as whitelisted vault.\"}},\"updateWhitelistedVaultMetadata(address,string)\":{\"params\":{\"metadata\":\"The metadata of the vault, to associate info with the vault in the events log.\",\"receiver\":\"The address of the whitelisted vault.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"ActivateRewardAllocation(bytes,uint64,(address,uint96)[])\":{\"notice\":\"Emitted when a new reward allocation has been activated.\"},\"CommissionChangeDelaySet(uint64)\":{\"notice\":\"Emitted when the commission change delay has been set.\"},\"MaxNumWeightsPerRewardAllocationSet(uint8)\":{\"notice\":\"Emitted when the maximum number of weights per reward allocation has been set.\"},\"MaxWeightPerVaultSet(uint96)\":{\"notice\":\"Emitted when the maximum weight per vault in a reward allocation has been set.\"},\"QueueRewardAllocation(bytes,uint64,(address,uint96)[])\":{\"notice\":\"Emitted when a new reward allocation has been queued.\"},\"QueuedValCommission(bytes,uint96)\":{\"notice\":\"Emitted when a validator's commission rate on incentive tokens has been queued.\"},\"RewardAllocationBlockDelaySet(uint64)\":{\"notice\":\"Emitted when the delay in blocks before a new reward allocation can go into effect has been set.\"},\"SetDefaultRewardAllocation((uint64,(address,uint96)[]))\":{\"notice\":\"Emitted when the governance module has set a new default reward allocation.\"},\"ValCommissionSet(bytes,uint96,uint96)\":{\"notice\":\"Emitted when the commission rate of a validator on incentive tokens has been set.\"},\"VaultWhitelistedStatusUpdated(address,bool,string)\":{\"notice\":\"Emitted when the vault's whitelisted status have been updated.\"},\"WhitelistedVaultMetadataUpdated(address,string)\":{\"notice\":\"Emitted when the metadata of a whitelisted vault has been updated.\"}},\"kind\":\"user\",\"methods\":{\"activateQueuedValCommission(bytes)\":{\"notice\":\"Activates the queued commission rate of a validator on incentive tokens.\"},\"activateReadyQueuedRewardAllocation(bytes)\":{\"notice\":\"Activates the queued reward allocation for a validator if its ready for the current block.\"},\"getActiveRewardAllocation(bytes)\":{\"notice\":\"Returns the active reward allocation for validator with given pubkey\"},\"getDefaultRewardAllocation()\":{\"notice\":\"Returns the default reward allocation for validators that do not have a reward allocation.\"},\"getQueuedRewardAllocation(bytes)\":{\"notice\":\"Returns the queued reward allocation for a validator with given pubkey\"},\"getSetActiveRewardAllocation(bytes)\":{\"notice\":\"Returns the active reward allocation set by the validator with given pubkey.\"},\"getValCommissionOnIncentiveTokens(bytes)\":{\"notice\":\"Returns the commission rate of a validator on an incentive tokens.\"},\"getValQueuedCommissionOnIncentiveTokens(bytes)\":{\"notice\":\"Returns the queued commission struct of a validator on an incentive tokens.\"},\"getValidatorIncentiveTokenShare(bytes,uint256)\":{\"notice\":\"Returns the validator's share of the incentive tokens based on the validator's commission rate.\"},\"isQueuedRewardAllocationReady(bytes,uint256)\":{\"notice\":\"Returns the status of whether a queued reward allocation is ready to be activated.\"},\"isReady()\":{\"notice\":\"Returns the status of whether the BeraChef contract is ready to be used.\"},\"queueNewRewardAllocation(bytes,uint64,(address,uint96)[])\":{\"notice\":\"Add a new reward allocation to the queue for validator with given pubkey. Does not allow overwriting of existing queued reward allocation.\"},\"queueValCommission(bytes,uint96)\":{\"notice\":\"Queues a commission rate change for a validator on incentive tokens.\"},\"setCommissionChangeDelay(uint64)\":{\"notice\":\"Sets the commission change delay.\"},\"setDefaultRewardAllocation((uint64,(address,uint96)[]))\":{\"notice\":\"Sets the default reward allocation for validators that do not have a reward allocation.\"},\"setMaxNumWeightsPerRewardAllocation(uint8)\":{\"notice\":\"Sets the maximum number of weights per reward allocation.\"},\"setMaxWeightPerVault(uint96)\":{\"notice\":\"Sets the maximum weight a vault can assume in a reward allocation.\"},\"setRewardAllocationBlockDelay(uint64)\":{\"notice\":\"Sets the delay in blocks before a new reward allocation can be queued.\"},\"setVaultWhitelistedStatus(address,bool,string)\":{\"notice\":\"Updates the vault's whitelisted statusThe caller of this function must be the governance module account.\"},\"updateWhitelistedVaultMetadata(address,string)\":{\"notice\":\"Updates the metadata of a whitelisted vault, reverts if vault is not whitelisted.The caller of this function must be the governance module account.\"}},\"notice\":\"Interface of the BeraChef module\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/pol/interfaces/IBeraChef.sol\":\"IBeraChef\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":4294967295},\"remappings\":[\":@mock/=test/mock/\",\":@openzeppelin-gov-ext/=node_modules/@openzeppelin/contracts-upgradeable/governance/extensions/\",\":@openzeppelin-gov/=node_modules/@openzeppelin/contracts-upgradeable/governance/\",\":@openzeppelin/contracts-upgradeable/=node_modules/@openzeppelin/contracts-upgradeable/\",\":@openzeppelin/contracts/=node_modules/@openzeppelin/contracts/\",\":@prb/math/=node_modules/@prb/math/\",\":@pythnetwork/=node_modules/@pythnetwork/pyth-sdk-solidity/\",\":ds-test/=lib/openzeppelin-foundry-upgrades/lib/solidity-stringutils/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-foundry-upgrades/=lib/openzeppelin-foundry-upgrades/src/\",\":solady/src/=lib/solady/src/\",\":solady/test/=lib/solady/test/\",\":solidity-stringutils/=lib/openzeppelin-foundry-upgrades/lib/solidity-stringutils/\",\":transient-goodies/=lib/transient-goodies/src/\"]},\"sources\":{\"src/base/IStakingRewardsErrors.sol\":{\"keccak256\":\"0xa288fc43d5339a6cb74d707024c83515583bbc9464dc3acf925d83bf2734ee0d\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://cf55cebb3acd6f33a10b460b070a8681902028594e7cdda99dbe03ac868ebf5b\",\"dweb:/ipfs/QmRC3qu3NyR3u647m7gQ2VcAz9xAbAnWoDmHbVEHJuov8d\"]},\"src/pol/interfaces/IBeraChef.sol\":{\"keccak256\":\"0xb15168217d38b6ae4dba29760f86f1c4e2585cffe8061cecfadf062a7113d6dd\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://5e126f4e8b162add79ff75d6e1dbbdb5bee96031fef16429e490087fa843adee\",\"dweb:/ipfs/QmRE1hkWcpKvi6i1vu1aZ5SEFFmvC1EpxWdexooZRVMqYQ\"]},\"src/pol/interfaces/IPOLErrors.sol\":{\"keccak256\":\"0xf6c1c487b083b802d10a83198b04d056bf9fb596ad498bd50fe6373aa49eaa34\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://910b3e2572f90707b1682c2bde50c28b03e4f7d72ec2b4bae5e0c62bea81ceb9\",\"dweb:/ipfs/QmY4ZdRVK8cYRjkRJVAaEUkGhmzU2SriMQk9JeLTHbBg1A\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.26+commit.8a97fa7a"},"language":"Solidity","output":{"abi":[{"inputs":[],"type":"error","name":"AmountLessThanMinIncentiveRate"},{"inputs":[],"type":"error","name":"CannotRecoverIncentiveToken"},{"inputs":[],"type":"error","name":"CannotRecoverRewardToken"},{"inputs":[],"type":"error","name":"CannotRecoverStakingToken"},{"inputs":[],"type":"error","name":"CommissionChangeAlreadyQueued"},{"inputs":[],"type":"error","name":"CommissionNotQueuedOrDelayNotPassed"},{"inputs":[],"type":"error","name":"DepositNotMultipleOfGwei"},{"inputs":[],"type":"error","name":"DepositValueTooHigh"},{"inputs":[],"type":"error","name":"DonateAmountLessThanPayoutAmount"},{"inputs":[],"type":"error","name":"IncentiveRateTooHigh"},{"inputs":[],"type":"error","name":"IndexOutOfRange"},{"inputs":[],"type":"error","name":"InsolventReward"},{"inputs":[],"type":"error","name":"InsufficientDelegateStake"},{"inputs":[],"type":"error","name":"InsufficientDeposit"},{"inputs":[],"type":"error","name":"InsufficientIncentiveTokens"},{"inputs":[],"type":"error","name":"InsufficientSelfStake"},{"inputs":[],"type":"error","name":"InsufficientStake"},{"inputs":[],"type":"error","name":"InvalidActivateBoostDelay"},{"inputs":[],"type":"error","name":"InvalidArray"},{"inputs":[],"type":"error","name":"InvalidBaseRate"},{"inputs":[],"type":"error","name":"InvalidBoostMultiplier"},{"inputs":[],"type":"error","name":"InvalidCommissionChangeDelay"},{"inputs":[],"type":"error","name":"InvalidCommissionValue"},{"inputs":[],"type":"error","name":"InvalidCredentialsLength"},{"inputs":[],"type":"error","name":"InvalidDistribution"},{"inputs":[],"type":"error","name":"InvalidDropBoostDelay"},{"inputs":[],"type":"error","name":"InvalidIncentiveRate"},{"inputs":[],"type":"error","name":"InvalidMaxIncentiveTokensCount"},{"inputs":[],"type":"error","name":"InvalidMaxWeightPerVault"},{"inputs":[],"type":"error","name":"InvalidMerkleRoot"},{"inputs":[],"type":"error","name":"InvalidMinBoostedRewardRate"},{"inputs":[],"type":"error","name":"InvalidProof"},{"inputs":[],"type":"error","name":"InvalidPubKeyLength"},{"inputs":[],"type":"error","name":"InvalidRewardAllocationWeights"},{"inputs":[],"type":"error","name":"InvalidRewardClaimDelay"},{"inputs":[],"type":"error","name":"InvalidRewardConvexity"},{"inputs":[],"type":"error","name":"InvalidRewardRate"},{"inputs":[],"type":"error","name":"InvalidSignatureLength"},{"inputs":[],"type":"error","name":"InvalidStartBlock"},{"inputs":[],"type":"error","name":"InvalidToken"},{"inputs":[],"type":"error","name":"InvalidWeight"},{"inputs":[],"type":"error","name":"InvalidateDefaultRewardAllocation"},{"inputs":[],"type":"error","name":"InvariantCheckFailed"},{"inputs":[],"type":"error","name":"MaxNumWeightsPerRewardAllocationIsZero"},{"inputs":[],"type":"error","name":"MinIncentiveRateIsZero"},{"inputs":[],"type":"error","name":"NotAContract"},{"inputs":[],"type":"error","name":"NotApprovedSender"},{"inputs":[],"type":"error","name":"NotBGT"},{"inputs":[],"type":"error","name":"NotBlockRewardController"},{"inputs":[],"type":"error","name":"NotDelegate"},{"inputs":[],"type":"error","name":"NotDistributor"},{"inputs":[],"type":"error","name":"NotEnoughBalance"},{"inputs":[],"type":"error","name":"NotEnoughBoostedBalance"},{"inputs":[],"type":"error","name":"NotEnoughTime"},{"inputs":[],"type":"error","name":"NotFactoryVault"},{"inputs":[],"type":"error","name":"NotFeeCollector"},{"inputs":[],"type":"error","name":"NotIncentiveManager"},{"inputs":[],"type":"error","name":"NotNewOperator"},{"inputs":[],"type":"error","name":"NotOperator"},{"inputs":[],"type":"error","name":"NotWhitelistedVault"},{"inputs":[],"type":"error","name":"OperatorAlreadySet"},{"inputs":[],"type":"error","name":"PayoutAmountIsZero"},{"inputs":[],"type":"error","name":"RewardAllocationAlreadyQueued"},{"inputs":[],"type":"error","name":"RewardAllocationBlockDelayTooLarge"},{"inputs":[],"type":"error","name":"RewardCycleNotEnded"},{"inputs":[],"type":"error","name":"RewardInactive"},{"inputs":[],"type":"error","name":"RewardsDurationIsZero"},{"inputs":[],"type":"error","name":"StakeAmountIsZero"},{"inputs":[],"type":"error","name":"TimestampAlreadyProcessed"},{"inputs":[],"type":"error","name":"TokenAlreadyWhitelistedOrLimitReached"},{"inputs":[],"type":"error","name":"TokenNotWhitelisted"},{"inputs":[],"type":"error","name":"TooManyWeights"},{"inputs":[],"type":"error","name":"TotalSupplyOverflow"},{"inputs":[],"type":"error","name":"WithdrawAmountIsZero"},{"inputs":[],"type":"error","name":"ZeroAddress"},{"inputs":[],"type":"error","name":"ZeroOperatorOnFirstDeposit"},{"inputs":[],"type":"error","name":"ZeroPercentageWeight"},{"inputs":[{"internalType":"bytes","name":"valPubkey","type":"bytes","indexed":true},{"internalType":"uint64","name":"startBlock","type":"uint64","indexed":false},{"internalType":"struct IBeraChef.Weight[]","name":"weights","type":"tuple[]","components":[{"internalType":"address","name":"receiver","type":"address"},{"internalType":"uint96","name":"percentageNumerator","type":"uint96"}],"indexed":false}],"type":"event","name":"ActivateRewardAllocation","anonymous":false},{"inputs":[{"internalType":"uint64","name":"commissionChangeDelay","type":"uint64","indexed":false}],"type":"event","name":"CommissionChangeDelaySet","anonymous":false},{"inputs":[{"internalType":"uint8","name":"maxNumWeightsPerRewardAllocation","type":"uint8","indexed":false}],"type":"event","name":"MaxNumWeightsPerRewardAllocationSet","anonymous":false},{"inputs":[{"internalType":"uint96","name":"maxWeightPerVault","type":"uint96","indexed":false}],"type":"event","name":"MaxWeightPerVaultSet","anonymous":false},{"inputs":[{"internalType":"bytes","name":"valPubkey","type":"bytes","indexed":true},{"internalType":"uint64","name":"startBlock","type":"uint64","indexed":false},{"internalType":"struct IBeraChef.Weight[]","name":"weights","type":"tuple[]","components":[{"internalType":"address","name":"receiver","type":"address"},{"internalType":"uint96","name":"percentageNumerator","type":"uint96"}],"indexed":false}],"type":"event","name":"QueueRewardAllocation","anonymous":false},{"inputs":[{"internalType":"bytes","name":"valPubkey","type":"bytes","indexed":true},{"internalType":"uint96","name":"queuedCommissionRate","type":"uint96","indexed":false}],"type":"event","name":"QueuedValCommission","anonymous":false},{"inputs":[{"internalType":"uint64","name":"rewardAllocationBlockDelay","type":"uint64","indexed":false}],"type":"event","name":"RewardAllocationBlockDelaySet","anonymous":false},{"inputs":[{"internalType":"struct IBeraChef.RewardAllocation","name":"rewardAllocation","type":"tuple","components":[{"internalType":"uint64","name":"startBlock","type":"uint64"},{"internalType":"struct IBeraChef.Weight[]","name":"weights","type":"tuple[]","components":[{"internalType":"address","name":"receiver","type":"address"},{"internalType":"uint96","name":"percentageNumerator","type":"uint96"}]}],"indexed":false}],"type":"event","name":"SetDefaultRewardAllocation","anonymous":false},{"inputs":[{"internalType":"bytes","name":"valPubkey","type":"bytes","indexed":true},{"internalType":"uint96","name":"oldCommissionRate","type":"uint96","indexed":false},{"internalType":"uint96","name":"newCommissionRate","type":"uint96","indexed":false}],"type":"event","name":"ValCommissionSet","anonymous":false},{"inputs":[{"internalType":"address","name":"receiver","type":"address","indexed":true},{"internalType":"bool","name":"isWhitelisted","type":"bool","indexed":true},{"internalType":"string","name":"metadata","type":"string","indexed":false}],"type":"event","name":"VaultWhitelistedStatusUpdated","anonymous":false},{"inputs":[{"internalType":"address","name":"receiver","type":"address","indexed":true},{"internalType":"string","name":"metadata","type":"string","indexed":false}],"type":"event","name":"WhitelistedVaultMetadataUpdated","anonymous":false},{"inputs":[{"internalType":"bytes","name":"valPubkey","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"activateQueuedValCommission"},{"inputs":[{"internalType":"bytes","name":"valPubkey","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"activateReadyQueuedRewardAllocation"},{"inputs":[{"internalType":"bytes","name":"valPubkey","type":"bytes"}],"stateMutability":"view","type":"function","name":"getActiveRewardAllocation","outputs":[{"internalType":"struct IBeraChef.RewardAllocation","name":"","type":"tuple","components":[{"internalType":"uint64","name":"startBlock","type":"uint64"},{"internalType":"struct IBeraChef.Weight[]","name":"weights","type":"tuple[]","components":[{"internalType":"address","name":"receiver","type":"address"},{"internalType":"uint96","name":"percentageNumerator","type":"uint96"}]}]}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getDefaultRewardAllocation","outputs":[{"internalType":"struct IBeraChef.RewardAllocation","name":"","type":"tuple","components":[{"internalType":"uint64","name":"startBlock","type":"uint64"},{"internalType":"struct IBeraChef.Weight[]","name":"weights","type":"tuple[]","components":[{"internalType":"address","name":"receiver","type":"address"},{"internalType":"uint96","name":"percentageNumerator","type":"uint96"}]}]}]},{"inputs":[{"internalType":"bytes","name":"valPubkey","type":"bytes"}],"stateMutability":"view","type":"function","name":"getQueuedRewardAllocation","outputs":[{"internalType":"struct IBeraChef.RewardAllocation","name":"","type":"tuple","components":[{"internalType":"uint64","name":"startBlock","type":"uint64"},{"internalType":"struct IBeraChef.Weight[]","name":"weights","type":"tuple[]","components":[{"internalType":"address","name":"receiver","type":"address"},{"internalType":"uint96","name":"percentageNumerator","type":"uint96"}]}]}]},{"inputs":[{"internalType":"bytes","name":"valPubkey","type":"bytes"}],"stateMutability":"view","type":"function","name":"getSetActiveRewardAllocation","outputs":[{"internalType":"struct IBeraChef.RewardAllocation","name":"","type":"tuple","components":[{"internalType":"uint64","name":"startBlock","type":"uint64"},{"internalType":"struct IBeraChef.Weight[]","name":"weights","type":"tuple[]","components":[{"internalType":"address","name":"receiver","type":"address"},{"internalType":"uint96","name":"percentageNumerator","type":"uint96"}]}]}]},{"inputs":[{"internalType":"bytes","name":"valPubkey","type":"bytes"}],"stateMutability":"view","type":"function","name":"getValCommissionOnIncentiveTokens","outputs":[{"internalType":"uint96","name":"","type":"uint96"}]},{"inputs":[{"internalType":"bytes","name":"valPubkey","type":"bytes"}],"stateMutability":"view","type":"function","name":"getValQueuedCommissionOnIncentiveTokens","outputs":[{"internalType":"struct IBeraChef.QueuedCommissionRateChange","name":"","type":"tuple","components":[{"internalType":"uint32","name":"blockNumberLast","type":"uint32"},{"internalType":"uint96","name":"commissionRate","type":"uint96"}]}]},{"inputs":[{"internalType":"bytes","name":"valPubkey","type":"bytes"},{"internalType":"uint256","name":"incentiveTokenAmount","type":"uint256"}],"stateMutability":"view","type":"function","name":"getValidatorIncentiveTokenShare","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"bytes","name":"valPubkey","type":"bytes"},{"internalType":"uint256","name":"blockNumber","type":"uint256"}],"stateMutability":"view","type":"function","name":"isQueuedRewardAllocationReady","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"isReady","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"bytes","name":"valPubkey","type":"bytes"},{"internalType":"uint64","name":"startBlock","type":"uint64"},{"internalType":"struct IBeraChef.Weight[]","name":"weights","type":"tuple[]","components":[{"internalType":"address","name":"receiver","type":"address"},{"internalType":"uint96","name":"percentageNumerator","type":"uint96"}]}],"stateMutability":"nonpayable","type":"function","name":"queueNewRewardAllocation"},{"inputs":[{"internalType":"bytes","name":"valPubkey","type":"bytes"},{"internalType":"uint96","name":"commissionRate","type":"uint96"}],"stateMutability":"nonpayable","type":"function","name":"queueValCommission"},{"inputs":[{"internalType":"uint64","name":"_commissionChangeDelay","type":"uint64"}],"stateMutability":"nonpayable","type":"function","name":"setCommissionChangeDelay"},{"inputs":[{"internalType":"struct IBeraChef.RewardAllocation","name":"rewardAllocation","type":"tuple","components":[{"internalType":"uint64","name":"startBlock","type":"uint64"},{"internalType":"struct IBeraChef.Weight[]","name":"weights","type":"tuple[]","components":[{"internalType":"address","name":"receiver","type":"address"},{"internalType":"uint96","name":"percentageNumerator","type":"uint96"}]}]}],"stateMutability":"nonpayable","type":"function","name":"setDefaultRewardAllocation"},{"inputs":[{"internalType":"uint8","name":"_maxNumWeightsPerRewardAllocation","type":"uint8"}],"stateMutability":"nonpayable","type":"function","name":"setMaxNumWeightsPerRewardAllocation"},{"inputs":[{"internalType":"uint96","name":"_maxWeightPerVault","type":"uint96"}],"stateMutability":"nonpayable","type":"function","name":"setMaxWeightPerVault"},{"inputs":[{"internalType":"uint64","name":"_rewardAllocationBlockDelay","type":"uint64"}],"stateMutability":"nonpayable","type":"function","name":"setRewardAllocationBlockDelay"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"},{"internalType":"bool","name":"isWhitelisted","type":"bool"},{"internalType":"string","name":"metadata","type":"string"}],"stateMutability":"nonpayable","type":"function","name":"setVaultWhitelistedStatus"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"},{"internalType":"string","name":"metadata","type":"string"}],"stateMutability":"nonpayable","type":"function","name":"updateWhitelistedVaultMetadata"}],"devdoc":{"kind":"dev","methods":{"activateQueuedValCommission(bytes)":{"params":{"valPubkey":"The validator's pubkey."}},"activateReadyQueuedRewardAllocation(bytes)":{"details":"Should be called by the distribution contract.","params":{"valPubkey":"The validator's pubkey."}},"getActiveRewardAllocation(bytes)":{"params":{"valPubkey":"The validator's pubkey."},"returns":{"_0":"rewardAllocation The active reward allocation."}},"getDefaultRewardAllocation()":{"returns":{"_0":"rewardAllocation The default reward allocation."}},"getQueuedRewardAllocation(bytes)":{"params":{"valPubkey":"The validator's pubkey."},"returns":{"_0":"rewardAllocation The queued reward allocation."}},"getSetActiveRewardAllocation(bytes)":{"details":"This will return active reward allocation set by validators even if its not valid.","params":{"valPubkey":"The validator's pubkey."},"returns":{"_0":"rewardAllocation The reward allocation."}},"getValCommissionOnIncentiveTokens(bytes)":{"details":"Default commission rate is 5% if the commission was never set.","params":{"valPubkey":"The validator's pubkey."},"returns":{"_0":"commissionRate The commission rate of the validator on the incentive tokens."}},"getValQueuedCommissionOnIncentiveTokens(bytes)":{"params":{"valPubkey":"The validator's pubkey."},"returns":{"_0":"queuedCommissionRate The queued commission struct of the validator on the incentive tokens."}},"getValidatorIncentiveTokenShare(bytes,uint256)":{"params":{"incentiveTokenAmount":"The amount of the incentive tokens.","valPubkey":"The validator's pubkey."},"returns":{"_0":"validatorShare The validator's share of the incentive tokens."}},"isQueuedRewardAllocationReady(bytes,uint256)":{"params":{"blockNumber":"The block number to be queried.","valPubkey":"The validator's pubkey."},"returns":{"_0":"isReady True if the queued reward allocation is ready to be activated, false otherwise."}},"isReady()":{"details":"This function should be used by all contracts that depend on a system call.This will return false if the governance module has not set a default reward allocation yet.","returns":{"_0":"isReady True if the BeraChef is ready to be used, false otherwise."}},"queueNewRewardAllocation(bytes,uint64,(address,uint96)[])":{"details":"The weights of the reward allocation must add up to 100% or 1e4. Only whitelisted pools may be used as well.","params":{"startBlock":"The block that the reward allocation goes into effect.","valPubkey":"The validator's pubkey.","weights":"The weights of the reward allocation."}},"queueValCommission(bytes,uint96)":{"details":"The caller of this function must be the validator operator address.Revert if already a commission rate change is queued.","params":{"commissionRate":"The commission rate of the validator on the incentive tokens.","valPubkey":"The validator's pubkey."}},"setCommissionChangeDelay(uint64)":{"details":"Only owner can call this function.","params":{"_commissionChangeDelay":"The delay in blocks to activate a queued commission change."}},"setDefaultRewardAllocation((uint64,(address,uint96)[]))":{"details":"The caller of this function must be the governance module account.","params":{"rewardAllocation":"The default reward allocation."}},"setVaultWhitelistedStatus(address,bool,string)":{"params":{"isWhitelisted":"The whitelist status; true if the receiver is being whitelisted, false otherwise.","metadata":"The metadata of the vault.","receiver":"The address to remove or add as whitelisted vault."}},"updateWhitelistedVaultMetadata(address,string)":{"params":{"metadata":"The metadata of the vault, to associate info with the vault in the events log.","receiver":"The address of the whitelisted vault."}}},"version":1},"userdoc":{"kind":"user","methods":{"activateQueuedValCommission(bytes)":{"notice":"Activates the queued commission rate of a validator on incentive tokens."},"activateReadyQueuedRewardAllocation(bytes)":{"notice":"Activates the queued reward allocation for a validator if its ready for the current block."},"getActiveRewardAllocation(bytes)":{"notice":"Returns the active reward allocation for validator with given pubkey"},"getDefaultRewardAllocation()":{"notice":"Returns the default reward allocation for validators that do not have a reward allocation."},"getQueuedRewardAllocation(bytes)":{"notice":"Returns the queued reward allocation for a validator with given pubkey"},"getSetActiveRewardAllocation(bytes)":{"notice":"Returns the active reward allocation set by the validator with given pubkey."},"getValCommissionOnIncentiveTokens(bytes)":{"notice":"Returns the commission rate of a validator on an incentive tokens."},"getValQueuedCommissionOnIncentiveTokens(bytes)":{"notice":"Returns the queued commission struct of a validator on an incentive tokens."},"getValidatorIncentiveTokenShare(bytes,uint256)":{"notice":"Returns the validator's share of the incentive tokens based on the validator's commission rate."},"isQueuedRewardAllocationReady(bytes,uint256)":{"notice":"Returns the status of whether a queued reward allocation is ready to be activated."},"isReady()":{"notice":"Returns the status of whether the BeraChef contract is ready to be used."},"queueNewRewardAllocation(bytes,uint64,(address,uint96)[])":{"notice":"Add a new reward allocation to the queue for validator with given pubkey. Does not allow overwriting of existing queued reward allocation."},"queueValCommission(bytes,uint96)":{"notice":"Queues a commission rate change for a validator on incentive tokens."},"setCommissionChangeDelay(uint64)":{"notice":"Sets the commission change delay."},"setDefaultRewardAllocation((uint64,(address,uint96)[]))":{"notice":"Sets the default reward allocation for validators that do not have a reward allocation."},"setMaxNumWeightsPerRewardAllocation(uint8)":{"notice":"Sets the maximum number of weights per reward allocation."},"setMaxWeightPerVault(uint96)":{"notice":"Sets the maximum weight a vault can assume in a reward allocation."},"setRewardAllocationBlockDelay(uint64)":{"notice":"Sets the delay in blocks before a new reward allocation can be queued."},"setVaultWhitelistedStatus(address,bool,string)":{"notice":"Updates the vault's whitelisted statusThe caller of this function must be the governance module account."},"updateWhitelistedVaultMetadata(address,string)":{"notice":"Updates the metadata of a whitelisted vault, reverts if vault is not whitelisted.The caller of this function must be the governance module account."}},"version":1}},"settings":{"remappings":["@mock/=test/mock/","@openzeppelin-gov-ext/=node_modules/@openzeppelin/contracts-upgradeable/governance/extensions/","@openzeppelin-gov/=node_modules/@openzeppelin/contracts-upgradeable/governance/","@openzeppelin/contracts-upgradeable/=node_modules/@openzeppelin/contracts-upgradeable/","@openzeppelin/contracts/=node_modules/@openzeppelin/contracts/","@prb/math/=node_modules/@prb/math/","@pythnetwork/=node_modules/@pythnetwork/pyth-sdk-solidity/","ds-test/=lib/openzeppelin-foundry-upgrades/lib/solidity-stringutils/lib/ds-test/src/","forge-std/=lib/forge-std/src/","openzeppelin-foundry-upgrades/=lib/openzeppelin-foundry-upgrades/src/","solady/src/=lib/solady/src/","solady/test/=lib/solady/test/","solidity-stringutils/=lib/openzeppelin-foundry-upgrades/lib/solidity-stringutils/","transient-goodies/=lib/transient-goodies/src/"],"optimizer":{"enabled":true,"runs":4294967295},"metadata":{"bytecodeHash":"none"},"compilationTarget":{"src/pol/interfaces/IBeraChef.sol":"IBeraChef"},"evmVersion":"cancun","libraries":{}},"sources":{"src/base/IStakingRewardsErrors.sol":{"keccak256":"0xa288fc43d5339a6cb74d707024c83515583bbc9464dc3acf925d83bf2734ee0d","urls":["bzz-raw://cf55cebb3acd6f33a10b460b070a8681902028594e7cdda99dbe03ac868ebf5b","dweb:/ipfs/QmRC3qu3NyR3u647m7gQ2VcAz9xAbAnWoDmHbVEHJuov8d"],"license":"BUSL-1.1"},"src/pol/interfaces/IBeraChef.sol":{"keccak256":"0xb15168217d38b6ae4dba29760f86f1c4e2585cffe8061cecfadf062a7113d6dd","urls":["bzz-raw://5e126f4e8b162add79ff75d6e1dbbdb5bee96031fef16429e490087fa843adee","dweb:/ipfs/QmRE1hkWcpKvi6i1vu1aZ5SEFFmvC1EpxWdexooZRVMqYQ"],"license":"BUSL-1.1"},"src/pol/interfaces/IPOLErrors.sol":{"keccak256":"0xf6c1c487b083b802d10a83198b04d056bf9fb596ad498bd50fe6373aa49eaa34","urls":["bzz-raw://910b3e2572f90707b1682c2bde50c28b03e4f7d72ec2b4bae5e0c62bea81ceb9","dweb:/ipfs/QmY4ZdRVK8cYRjkRJVAaEUkGhmzU2SriMQk9JeLTHbBg1A"],"license":"BUSL-1.1"}},"version":1},"storageLayout":{"storage":[],"types":{}},"ast":{"absolutePath":"src/pol/interfaces/IBeraChef.sol","id":80955,"exportedSymbols":{"IBeraChef":[80954],"IPOLErrors":[81420]},"nodeType":"SourceUnit","src":"37:14003:142","nodes":[{"id":80684,"nodeType":"PragmaDirective","src":"37:24:142","nodes":[],"literals":["solidity","^","0.8",".26"]},{"id":80686,"nodeType":"ImportDirective","src":"63:46:142","nodes":[],"absolutePath":"src/pol/interfaces/IPOLErrors.sol","file":"./IPOLErrors.sol","nameLocation":"-1:-1:-1","scope":80955,"sourceUnit":81421,"symbolAliases":[{"foreign":{"id":80685,"name":"IPOLErrors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":81420,"src":"72:10:142","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":80954,"nodeType":"ContractDefinition","src":"156:13883:142","nodes":[{"id":80697,"nodeType":"StructDefinition","src":"531:195:142","nodes":[],"canonicalName":"IBeraChef.RewardAllocation","documentation":{"id":80690,"nodeType":"StructuredDocumentation","src":"479:47:142","text":"@notice Represents a RewardAllocation entry"},"members":[{"constant":false,"id":80692,"mutability":"mutable","name":"startBlock","nameLocation":"634:10:142","nodeType":"VariableDeclaration","scope":80697,"src":"627:17:142","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":80691,"name":"uint64","nodeType":"ElementaryTypeName","src":"627:6:142","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":80696,"mutability":"mutable","name":"weights","nameLocation":"712:7:142","nodeType":"VariableDeclaration","scope":80697,"src":"703:16:142","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Weight_$80703_storage_$dyn_storage_ptr","typeString":"struct IBeraChef.Weight[]"},"typeName":{"baseType":{"id":80694,"nodeType":"UserDefinedTypeName","pathNode":{"id":80693,"name":"Weight","nameLocations":["703:6:142"],"nodeType":"IdentifierPath","referencedDeclaration":80703,"src":"703:6:142"},"referencedDeclaration":80703,"src":"703:6:142","typeDescriptions":{"typeIdentifier":"t_struct$_Weight_$80703_storage_ptr","typeString":"struct IBeraChef.Weight"}},"id":80695,"nodeType":"ArrayTypeName","src":"703:8:142","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Weight_$80703_storage_$dyn_storage_ptr","typeString":"struct IBeraChef.Weight[]"}},"visibility":"internal"}],"name":"RewardAllocation","nameLocation":"538:16:142","scope":80954,"visibility":"public"},{"id":80703,"nodeType":"StructDefinition","src":"774:433:142","nodes":[],"canonicalName":"IBeraChef.Weight","documentation":{"id":80698,"nodeType":"StructuredDocumentation","src":"732:37:142","text":"@notice Represents a Weight entry"},"members":[{"constant":false,"id":80700,"mutability":"mutable","name":"receiver","nameLocation":"870:8:142","nodeType":"VariableDeclaration","scope":80703,"src":"862:16:142","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":80699,"name":"address","nodeType":"ElementaryTypeName","src":"862:7:142","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":80702,"mutability":"mutable","name":"percentageNumerator","nameLocation":"1181:19:142","nodeType":"VariableDeclaration","scope":80703,"src":"1174:26:142","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":80701,"name":"uint96","nodeType":"ElementaryTypeName","src":"1174:6:142","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"name":"Weight","nameLocation":"781:6:142","scope":80954,"visibility":"public"},{"id":80709,"nodeType":"StructDefinition","src":"1470:104:142","nodes":[],"canonicalName":"IBeraChef.QueuedCommissionRateChange","documentation":{"id":80704,"nodeType":"StructuredDocumentation","src":"1213:252:142","text":"@notice The struct of validator queued commission rate changes on incentive tokens.\n @param blockNumberLast The last block number commission rate was queued\n @param commissionRate The queued commission rate to be used by the validator"},"members":[{"constant":false,"id":80706,"mutability":"mutable","name":"blockNumberLast","nameLocation":"1521:15:142","nodeType":"VariableDeclaration","scope":80709,"src":"1514:22:142","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":80705,"name":"uint32","nodeType":"ElementaryTypeName","src":"1514:6:142","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":80708,"mutability":"mutable","name":"commissionRate","nameLocation":"1553:14:142","nodeType":"VariableDeclaration","scope":80709,"src":"1546:21:142","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":80707,"name":"uint96","nodeType":"ElementaryTypeName","src":"1546:6:142","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"name":"QueuedCommissionRateChange","nameLocation":"1477:26:142","scope":80954,"visibility":"public"},{"id":80715,"nodeType":"StructDefinition","src":"1816:92:142","nodes":[],"canonicalName":"IBeraChef.CommissionRate","documentation":{"id":80710,"nodeType":"StructuredDocumentation","src":"1580:231:142","text":"@notice Commission rate of a validator on incentive tokens\n @param activationBlock The block number in which the commission rate was activated\n @param commissionRate The commission rate to be used by the validator"},"members":[{"constant":false,"id":80712,"mutability":"mutable","name":"activationBlock","nameLocation":"1855:15:142","nodeType":"VariableDeclaration","scope":80715,"src":"1848:22:142","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":80711,"name":"uint32","nodeType":"ElementaryTypeName","src":"1848:6:142","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":80714,"mutability":"mutable","name":"commissionRate","nameLocation":"1887:14:142","nodeType":"VariableDeclaration","scope":80715,"src":"1880:21:142","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":80713,"name":"uint96","nodeType":"ElementaryTypeName","src":"1880:6:142","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"name":"CommissionRate","nameLocation":"1823:14:142","scope":80954,"visibility":"public"},{"id":80720,"nodeType":"EventDefinition","src":"2393:82:142","nodes":[],"anonymous":false,"documentation":{"id":80716,"nodeType":"StructuredDocumentation","src":"2197:191:142","text":"@notice Emitted when the maximum number of weights per reward allocation has been set.\n @param maxNumWeightsPerRewardAllocation The maximum number of weights per reward allocation."},"eventSelector":"1f427f3160f84ab8033ba8e3550b2a3f178241305e86660a221c0dc52f3bc9ae","name":"MaxNumWeightsPerRewardAllocationSet","nameLocation":"2399:35:142","parameters":{"id":80719,"nodeType":"ParameterList","parameters":[{"constant":false,"id":80718,"indexed":false,"mutability":"mutable","name":"maxNumWeightsPerRewardAllocation","nameLocation":"2441:32:142","nodeType":"VariableDeclaration","scope":80720,"src":"2435:38:142","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":80717,"name":"uint8","nodeType":"ElementaryTypeName","src":"2435:5:142","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"2434:40:142"}},{"id":80725,"nodeType":"EventDefinition","src":"2657:53:142","nodes":[],"anonymous":false,"documentation":{"id":80721,"nodeType":"StructuredDocumentation","src":"2481:171:142","text":"@notice Emitted when the maximum weight per vault in a reward allocation has been set.\n @param maxWeightPerVault The maximum weight per vault (in basis points)."},"eventSelector":"523ff6a2313471a5db395404a4772a665c76c13b1bb1307270db69eb843b803e","name":"MaxWeightPerVaultSet","nameLocation":"2663:20:142","parameters":{"id":80724,"nodeType":"ParameterList","parameters":[{"constant":false,"id":80723,"indexed":false,"mutability":"mutable","name":"maxWeightPerVault","nameLocation":"2691:17:142","nodeType":"VariableDeclaration","scope":80725,"src":"2684:24:142","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":80722,"name":"uint96","nodeType":"ElementaryTypeName","src":"2684:6:142","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"src":"2683:26:142"}},{"id":80730,"nodeType":"EventDefinition","src":"2942:71:142","nodes":[],"anonymous":false,"documentation":{"id":80726,"nodeType":"StructuredDocumentation","src":"2716:221:142","text":"@notice Emitted when the delay in blocks before a new reward allocation can go into effect has been set.\n @param rewardAllocationBlockDelay The delay in blocks before a new reward allocation can go into effect."},"eventSelector":"d30a76f5419042e46e49eaf91b6a0f0feaaa673b6db586a63d3e8e79d4bf2081","name":"RewardAllocationBlockDelaySet","nameLocation":"2948:29:142","parameters":{"id":80729,"nodeType":"ParameterList","parameters":[{"constant":false,"id":80728,"indexed":false,"mutability":"mutable","name":"rewardAllocationBlockDelay","nameLocation":"2985:26:142","nodeType":"VariableDeclaration","scope":80730,"src":"2978:33:142","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":80727,"name":"uint64","nodeType":"ElementaryTypeName","src":"2978:6:142","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"2977:35:142"}},{"id":80739,"nodeType":"EventDefinition","src":"3335:107:142","nodes":[],"anonymous":false,"documentation":{"id":80731,"nodeType":"StructuredDocumentation","src":"3019:311:142","text":"@notice Emitted when the vault's whitelisted status have been updated.\n @param receiver The address to remove or add as whitelisted vault.\n @param isWhitelisted The whitelist status; true if the receiver is being whitelisted, false otherwise.\n @param metadata The metadata of the vault."},"eventSelector":"ad865159180d43e1aedae6624a0e9e20d86e07afb82a96f8f9a8b2f3294e16c0","name":"VaultWhitelistedStatusUpdated","nameLocation":"3341:29:142","parameters":{"id":80738,"nodeType":"ParameterList","parameters":[{"constant":false,"id":80733,"indexed":true,"mutability":"mutable","name":"receiver","nameLocation":"3387:8:142","nodeType":"VariableDeclaration","scope":80739,"src":"3371:24:142","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":80732,"name":"address","nodeType":"ElementaryTypeName","src":"3371:7:142","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":80735,"indexed":true,"mutability":"mutable","name":"isWhitelisted","nameLocation":"3410:13:142","nodeType":"VariableDeclaration","scope":80739,"src":"3397:26:142","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":80734,"name":"bool","nodeType":"ElementaryTypeName","src":"3397:4:142","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":80737,"indexed":false,"mutability":"mutable","name":"metadata","nameLocation":"3432:8:142","nodeType":"VariableDeclaration","scope":80739,"src":"3425:15:142","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":80736,"name":"string","nodeType":"ElementaryTypeName","src":"3425:6:142","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3370:71:142"}},{"id":80746,"nodeType":"EventDefinition","src":"3657:81:142","nodes":[],"anonymous":false,"documentation":{"id":80740,"nodeType":"StructuredDocumentation","src":"3448:204:142","text":" @notice Emitted when the metadata of a whitelisted vault has been updated.\n @param receiver The address of the whitelisted vault.\n @param metadata The metadata of the vault."},"eventSelector":"b10c3a0623fdc435deba8729692b1a7c6c1886b7466c8cffa3ccdb42042ffbc5","name":"WhitelistedVaultMetadataUpdated","nameLocation":"3663:31:142","parameters":{"id":80745,"nodeType":"ParameterList","parameters":[{"constant":false,"id":80742,"indexed":true,"mutability":"mutable","name":"receiver","nameLocation":"3711:8:142","nodeType":"VariableDeclaration","scope":80746,"src":"3695:24:142","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":80741,"name":"address","nodeType":"ElementaryTypeName","src":"3695:7:142","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":80744,"indexed":false,"mutability":"mutable","name":"metadata","nameLocation":"3728:8:142","nodeType":"VariableDeclaration","scope":80746,"src":"3721:15:142","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":80743,"name":"string","nodeType":"ElementaryTypeName","src":"3721:6:142","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3694:43:142"}},{"id":80757,"nodeType":"EventDefinition","src":"4017:90:142","nodes":[],"anonymous":false,"documentation":{"id":80747,"nodeType":"StructuredDocumentation","src":"3744:268:142","text":" @notice Emitted when a new reward allocation has been queued.\n @param valPubkey The validator's pubkey.\n @param startBlock The block that the reward allocation goes into effect.\n @param weights The weights of the reward allocation."},"eventSelector":"22fe555512d9a04d20e3735ac5fe7a73227c2c6398f1453a5d60ce7aaf5de2ae","name":"QueueRewardAllocation","nameLocation":"4023:21:142","parameters":{"id":80756,"nodeType":"ParameterList","parameters":[{"constant":false,"id":80749,"indexed":true,"mutability":"mutable","name":"valPubkey","nameLocation":"4059:9:142","nodeType":"VariableDeclaration","scope":80757,"src":"4045:23:142","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":80748,"name":"bytes","nodeType":"ElementaryTypeName","src":"4045:5:142","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":80751,"indexed":false,"mutability":"mutable","name":"startBlock","nameLocation":"4077:10:142","nodeType":"VariableDeclaration","scope":80757,"src":"4070:17:142","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":80750,"name":"uint64","nodeType":"ElementaryTypeName","src":"4070:6:142","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":80755,"indexed":false,"mutability":"mutable","name":"weights","nameLocation":"4098:7:142","nodeType":"VariableDeclaration","scope":80757,"src":"4089:16:142","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Weight_$80703_memory_ptr_$dyn_memory_ptr","typeString":"struct IBeraChef.Weight[]"},"typeName":{"baseType":{"id":80753,"nodeType":"UserDefinedTypeName","pathNode":{"id":80752,"name":"Weight","nameLocations":["4089:6:142"],"nodeType":"IdentifierPath","referencedDeclaration":80703,"src":"4089:6:142"},"referencedDeclaration":80703,"src":"4089:6:142","typeDescriptions":{"typeIdentifier":"t_struct$_Weight_$80703_storage_ptr","typeString":"struct IBeraChef.Weight"}},"id":80754,"nodeType":"ArrayTypeName","src":"4089:8:142","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Weight_$80703_storage_$dyn_storage_ptr","typeString":"struct IBeraChef.Weight[]"}},"visibility":"internal"}],"src":"4044:62:142"}},{"id":80768,"nodeType":"EventDefinition","src":"4389:93:142","nodes":[],"anonymous":false,"documentation":{"id":80758,"nodeType":"StructuredDocumentation","src":"4113:271:142","text":" @notice Emitted when a new reward allocation has been activated.\n @param valPubkey The validator's pubkey.\n @param startBlock The block that the reward allocation goes into effect.\n @param weights The weights of the reward allocation."},"eventSelector":"09fed3850dff4fef07a5284847da937f94021882ecab1c143fcacd69e5451bd8","name":"ActivateRewardAllocation","nameLocation":"4395:24:142","parameters":{"id":80767,"nodeType":"ParameterList","parameters":[{"constant":false,"id":80760,"indexed":true,"mutability":"mutable","name":"valPubkey","nameLocation":"4434:9:142","nodeType":"VariableDeclaration","scope":80768,"src":"4420:23:142","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":80759,"name":"bytes","nodeType":"ElementaryTypeName","src":"4420:5:142","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":80762,"indexed":false,"mutability":"mutable","name":"startBlock","nameLocation":"4452:10:142","nodeType":"VariableDeclaration","scope":80768,"src":"4445:17:142","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":80761,"name":"uint64","nodeType":"ElementaryTypeName","src":"4445:6:142","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":80766,"indexed":false,"mutability":"mutable","name":"weights","nameLocation":"4473:7:142","nodeType":"VariableDeclaration","scope":80768,"src":"4464:16:142","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Weight_$80703_memory_ptr_$dyn_memory_ptr","typeString":"struct IBeraChef.Weight[]"},"typeName":{"baseType":{"id":80764,"nodeType":"UserDefinedTypeName","pathNode":{"id":80763,"name":"Weight","nameLocations":["4464:6:142"],"nodeType":"IdentifierPath","referencedDeclaration":80703,"src":"4464:6:142"},"referencedDeclaration":80703,"src":"4464:6:142","typeDescriptions":{"typeIdentifier":"t_struct$_Weight_$80703_storage_ptr","typeString":"struct IBeraChef.Weight"}},"id":80765,"nodeType":"ArrayTypeName","src":"4464:8:142","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Weight_$80703_storage_$dyn_storage_ptr","typeString":"struct IBeraChef.Weight[]"}},"visibility":"internal"}],"src":"4419:62:142"}},{"id":80774,"nodeType":"EventDefinition","src":"4657:68:142","nodes":[],"anonymous":false,"documentation":{"id":80769,"nodeType":"StructuredDocumentation","src":"4488:164:142","text":" @notice Emitted when the governance module has set a new default reward allocation.\n @param rewardAllocation The default reward allocation."},"eventSelector":"63a1be039047941d4150a7feb1920b5fadcbf022e1a21334fba542a52eabdaf7","name":"SetDefaultRewardAllocation","nameLocation":"4663:26:142","parameters":{"id":80773,"nodeType":"ParameterList","parameters":[{"constant":false,"id":80772,"indexed":false,"mutability":"mutable","name":"rewardAllocation","nameLocation":"4707:16:142","nodeType":"VariableDeclaration","scope":80774,"src":"4690:33:142","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_RewardAllocation_$80697_memory_ptr","typeString":"struct IBeraChef.RewardAllocation"},"typeName":{"id":80771,"nodeType":"UserDefinedTypeName","pathNode":{"id":80770,"name":"RewardAllocation","nameLocations":["4690:16:142"],"nodeType":"IdentifierPath","referencedDeclaration":80697,"src":"4690:16:142"},"referencedDeclaration":80697,"src":"4690:16:142","typeDescriptions":{"typeIdentifier":"t_struct$_RewardAllocation_$80697_storage_ptr","typeString":"struct IBeraChef.RewardAllocation"}},"visibility":"internal"}],"src":"4689:35:142"}},{"id":80779,"nodeType":"EventDefinition","src":"4913:61:142","nodes":[],"anonymous":false,"documentation":{"id":80775,"nodeType":"StructuredDocumentation","src":"4731:177:142","text":" @notice Emitted when the commission change delay has been set.\n @param commissionChangeDelay The delay in blocks to activate a queued commission change."},"eventSelector":"64362e066c3e2aa8c9ade9c3c475eca8e99702a002a5adbe13a4404fc05dfee3","name":"CommissionChangeDelaySet","nameLocation":"4919:24:142","parameters":{"id":80778,"nodeType":"ParameterList","parameters":[{"constant":false,"id":80777,"indexed":false,"mutability":"mutable","name":"commissionChangeDelay","nameLocation":"4951:21:142","nodeType":"VariableDeclaration","scope":80779,"src":"4944:28:142","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":80776,"name":"uint64","nodeType":"ElementaryTypeName","src":"4944:6:142","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"4943:30:142"}},{"id":80786,"nodeType":"EventDefinition","src":"5243:80:142","nodes":[],"anonymous":false,"documentation":{"id":80780,"nodeType":"StructuredDocumentation","src":"4980:258:142","text":" @notice Emitted when a validator's commission rate on incentive tokens has been queued.\n @param valPubkey The validator's pubkey.\n @param queuedCommissionRate The queued commission rate of the validator on the incentive tokens."},"eventSelector":"6c1fd7992c5cda804ff20cff8ec6eb7622a74aa084ff0f7bfd15b9f30a4a5a73","name":"QueuedValCommission","nameLocation":"5249:19:142","parameters":{"id":80785,"nodeType":"ParameterList","parameters":[{"constant":false,"id":80782,"indexed":true,"mutability":"mutable","name":"valPubkey","nameLocation":"5283:9:142","nodeType":"VariableDeclaration","scope":80786,"src":"5269:23:142","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":80781,"name":"bytes","nodeType":"ElementaryTypeName","src":"5269:5:142","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":80784,"indexed":false,"mutability":"mutable","name":"queuedCommissionRate","nameLocation":"5301:20:142","nodeType":"VariableDeclaration","scope":80786,"src":"5294:27:142","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":80783,"name":"uint96","nodeType":"ElementaryTypeName","src":"5294:6:142","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"src":"5268:54:142"}},{"id":80795,"nodeType":"EventDefinition","src":"5686:100:142","nodes":[],"anonymous":false,"documentation":{"id":80787,"nodeType":"StructuredDocumentation","src":"5329:352:142","text":" @notice Emitted when the commission rate of a validator on incentive tokens has been set.\n @param valPubkey The validator's pubkey.\n @param oldCommissionRate The old commission rate of the validator on the incentive tokens.\n @param newCommissionRate The new commission rate of the validator on the incentive tokens."},"eventSelector":"154e6b9420982ca77402c0dd255e23fef1199d854e122d1231ec746266d0cf48","name":"ValCommissionSet","nameLocation":"5692:16:142","parameters":{"id":80794,"nodeType":"ParameterList","parameters":[{"constant":false,"id":80789,"indexed":true,"mutability":"mutable","name":"valPubkey","nameLocation":"5723:9:142","nodeType":"VariableDeclaration","scope":80795,"src":"5709:23:142","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":80788,"name":"bytes","nodeType":"ElementaryTypeName","src":"5709:5:142","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":80791,"indexed":false,"mutability":"mutable","name":"oldCommissionRate","nameLocation":"5741:17:142","nodeType":"VariableDeclaration","scope":80795,"src":"5734:24:142","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":80790,"name":"uint96","nodeType":"ElementaryTypeName","src":"5734:6:142","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"},{"constant":false,"id":80793,"indexed":false,"mutability":"mutable","name":"newCommissionRate","nameLocation":"5767:17:142","nodeType":"VariableDeclaration","scope":80795,"src":"5760:24:142","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":80792,"name":"uint96","nodeType":"ElementaryTypeName","src":"5760:6:142","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"src":"5708:77:142"}},{"id":80804,"nodeType":"FunctionDefinition","src":"6285:109:142","nodes":[],"documentation":{"id":80796,"nodeType":"StructuredDocumentation","src":"6075:205:142","text":" @notice Returns the active reward allocation for validator with given pubkey\n @param valPubkey The validator's pubkey.\n @return rewardAllocation The active reward allocation."},"functionSelector":"da6f7563","implemented":false,"kind":"function","modifiers":[],"name":"getActiveRewardAllocation","nameLocation":"6294:25:142","parameters":{"id":80799,"nodeType":"ParameterList","parameters":[{"constant":false,"id":80798,"mutability":"mutable","name":"valPubkey","nameLocation":"6335:9:142","nodeType":"VariableDeclaration","scope":80804,"src":"6320:24:142","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":80797,"name":"bytes","nodeType":"ElementaryTypeName","src":"6320:5:142","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6319:26:142"},"returnParameters":{"id":80803,"nodeType":"ParameterList","parameters":[{"constant":false,"id":80802,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":80804,"src":"6369:23:142","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_RewardAllocation_$80697_memory_ptr","typeString":"struct IBeraChef.RewardAllocation"},"typeName":{"id":80801,"nodeType":"UserDefinedTypeName","pathNode":{"id":80800,"name":"RewardAllocation","nameLocations":["6369:16:142"],"nodeType":"IdentifierPath","referencedDeclaration":80697,"src":"6369:16:142"},"referencedDeclaration":80697,"src":"6369:16:142","typeDescriptions":{"typeIdentifier":"t_struct$_RewardAllocation_$80697_storage_ptr","typeString":"struct IBeraChef.RewardAllocation"}},"visibility":"internal"}],"src":"6368:25:142"},"scope":80954,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":80813,"nodeType":"FunctionDefinition","src":"6612:109:142","nodes":[],"documentation":{"id":80805,"nodeType":"StructuredDocumentation","src":"6400:207:142","text":" @notice Returns the queued reward allocation for a validator with given pubkey\n @param valPubkey The validator's pubkey.\n @return rewardAllocation The queued reward allocation."},"functionSelector":"4ecbf5c0","implemented":false,"kind":"function","modifiers":[],"name":"getQueuedRewardAllocation","nameLocation":"6621:25:142","parameters":{"id":80808,"nodeType":"ParameterList","parameters":[{"constant":false,"id":80807,"mutability":"mutable","name":"valPubkey","nameLocation":"6662:9:142","nodeType":"VariableDeclaration","scope":80813,"src":"6647:24:142","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":80806,"name":"bytes","nodeType":"ElementaryTypeName","src":"6647:5:142","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6646:26:142"},"returnParameters":{"id":80812,"nodeType":"ParameterList","parameters":[{"constant":false,"id":80811,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":80813,"src":"6696:23:142","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_RewardAllocation_$80697_memory_ptr","typeString":"struct IBeraChef.RewardAllocation"},"typeName":{"id":80810,"nodeType":"UserDefinedTypeName","pathNode":{"id":80809,"name":"RewardAllocation","nameLocations":["6696:16:142"],"nodeType":"IdentifierPath","referencedDeclaration":80697,"src":"6696:16:142"},"referencedDeclaration":80697,"src":"6696:16:142","typeDescriptions":{"typeIdentifier":"t_struct$_RewardAllocation_$80697_storage_ptr","typeString":"struct IBeraChef.RewardAllocation"}},"visibility":"internal"}],"src":"6695:25:142"},"scope":80954,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":80822,"nodeType":"FunctionDefinition","src":"7033:112:142","nodes":[],"documentation":{"id":80814,"nodeType":"StructuredDocumentation","src":"6727:301:142","text":" @notice Returns the active reward allocation set by the validator with given pubkey.\n @dev This will return active reward allocation set by validators even if its not valid.\n @param valPubkey The validator's pubkey.\n @return rewardAllocation The reward allocation."},"functionSelector":"230288ce","implemented":false,"kind":"function","modifiers":[],"name":"getSetActiveRewardAllocation","nameLocation":"7042:28:142","parameters":{"id":80817,"nodeType":"ParameterList","parameters":[{"constant":false,"id":80816,"mutability":"mutable","name":"valPubkey","nameLocation":"7086:9:142","nodeType":"VariableDeclaration","scope":80822,"src":"7071:24:142","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":80815,"name":"bytes","nodeType":"ElementaryTypeName","src":"7071:5:142","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7070:26:142"},"returnParameters":{"id":80821,"nodeType":"ParameterList","parameters":[{"constant":false,"id":80820,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":80822,"src":"7120:23:142","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_RewardAllocation_$80697_memory_ptr","typeString":"struct IBeraChef.RewardAllocation"},"typeName":{"id":80819,"nodeType":"UserDefinedTypeName","pathNode":{"id":80818,"name":"RewardAllocation","nameLocations":["7120:16:142"],"nodeType":"IdentifierPath","referencedDeclaration":80697,"src":"7120:16:142"},"referencedDeclaration":80697,"src":"7120:16:142","typeDescriptions":{"typeIdentifier":"t_struct$_RewardAllocation_$80697_storage_ptr","typeString":"struct IBeraChef.RewardAllocation"}},"visibility":"internal"}],"src":"7119:25:142"},"scope":80954,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":80829,"nodeType":"FunctionDefinition","src":"7336:86:142","nodes":[],"documentation":{"id":80823,"nodeType":"StructuredDocumentation","src":"7151:180:142","text":" @notice Returns the default reward allocation for validators that do not have a reward allocation.\n @return rewardAllocation The default reward allocation."},"functionSelector":"17dbf270","implemented":false,"kind":"function","modifiers":[],"name":"getDefaultRewardAllocation","nameLocation":"7345:26:142","parameters":{"id":80824,"nodeType":"ParameterList","parameters":[],"src":"7371:2:142"},"returnParameters":{"id":80828,"nodeType":"ParameterList","parameters":[{"constant":false,"id":80827,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":80829,"src":"7397:23:142","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_RewardAllocation_$80697_memory_ptr","typeString":"struct IBeraChef.RewardAllocation"},"typeName":{"id":80826,"nodeType":"UserDefinedTypeName","pathNode":{"id":80825,"name":"RewardAllocation","nameLocations":["7397:16:142"],"nodeType":"IdentifierPath","referencedDeclaration":80697,"src":"7397:16:142"},"referencedDeclaration":80697,"src":"7397:16:142","typeDescriptions":{"typeIdentifier":"t_struct$_RewardAllocation_$80697_storage_ptr","typeString":"struct IBeraChef.RewardAllocation"}},"visibility":"internal"}],"src":"7396:25:142"},"scope":80954,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":80839,"nodeType":"FunctionDefinition","src":"7751:161:142","nodes":[],"documentation":{"id":80830,"nodeType":"StructuredDocumentation","src":"7428:318:142","text":" @notice Returns the status of whether a queued reward allocation is ready to be activated.\n @param valPubkey The validator's pubkey.\n @param blockNumber The block number to be queried.\n @return isReady True if the queued reward allocation is ready to be activated, false otherwise."},"functionSelector":"722f8e0a","implemented":false,"kind":"function","modifiers":[],"name":"isQueuedRewardAllocationReady","nameLocation":"7760:29:142","parameters":{"id":80835,"nodeType":"ParameterList","parameters":[{"constant":false,"id":80832,"mutability":"mutable","name":"valPubkey","nameLocation":"7814:9:142","nodeType":"VariableDeclaration","scope":80839,"src":"7799:24:142","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":80831,"name":"bytes","nodeType":"ElementaryTypeName","src":"7799:5:142","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":80834,"mutability":"mutable","name":"blockNumber","nameLocation":"7841:11:142","nodeType":"VariableDeclaration","scope":80839,"src":"7833:19:142","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":80833,"name":"uint256","nodeType":"ElementaryTypeName","src":"7833:7:142","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7789:69:142"},"returnParameters":{"id":80838,"nodeType":"ParameterList","parameters":[{"constant":false,"id":80837,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":80839,"src":"7906:4:142","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":80836,"name":"bool","nodeType":"ElementaryTypeName","src":"7906:4:142","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7905:6:142"},"scope":80954,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":80845,"nodeType":"FunctionDefinition","src":"8297:48:142","nodes":[],"documentation":{"id":80840,"nodeType":"StructuredDocumentation","src":"7918:374:142","text":" @notice Returns the status of whether the BeraChef contract is ready to be used.\n @dev This function should be used by all contracts that depend on a system call.\n @dev This will return false if the governance module has not set a default reward allocation yet.\n @return isReady True if the BeraChef is ready to be used, false otherwise."},"functionSelector":"a094a031","implemented":false,"kind":"function","modifiers":[],"name":"isReady","nameLocation":"8306:7:142","parameters":{"id":80841,"nodeType":"ParameterList","parameters":[],"src":"8313:2:142"},"returnParameters":{"id":80844,"nodeType":"ParameterList","parameters":[{"constant":false,"id":80843,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":80845,"src":"8339:4:142","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":80842,"name":"bool","nodeType":"ElementaryTypeName","src":"8339:4:142","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8338:6:142"},"scope":80954,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":80854,"nodeType":"FunctionDefinition","src":"8613:157:142","nodes":[],"documentation":{"id":80846,"nodeType":"StructuredDocumentation","src":"8351:257:142","text":" @notice Returns the queued commission struct of a validator on an incentive tokens.\n @param valPubkey The validator's pubkey.\n @return queuedCommissionRate The queued commission struct of the validator on the incentive tokens."},"functionSelector":"a83f0817","implemented":false,"kind":"function","modifiers":[],"name":"getValQueuedCommissionOnIncentiveTokens","nameLocation":"8622:39:142","parameters":{"id":80849,"nodeType":"ParameterList","parameters":[{"constant":false,"id":80848,"mutability":"mutable","name":"valPubkey","nameLocation":"8677:9:142","nodeType":"VariableDeclaration","scope":80854,"src":"8662:24:142","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":80847,"name":"bytes","nodeType":"ElementaryTypeName","src":"8662:5:142","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8661:26:142"},"returnParameters":{"id":80853,"nodeType":"ParameterList","parameters":[{"constant":false,"id":80852,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":80854,"src":"8735:33:142","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_QueuedCommissionRateChange_$80709_memory_ptr","typeString":"struct IBeraChef.QueuedCommissionRateChange"},"typeName":{"id":80851,"nodeType":"UserDefinedTypeName","pathNode":{"id":80850,"name":"QueuedCommissionRateChange","nameLocations":["8735:26:142"],"nodeType":"IdentifierPath","referencedDeclaration":80709,"src":"8735:26:142"},"referencedDeclaration":80709,"src":"8735:26:142","typeDescriptions":{"typeIdentifier":"t_struct$_QueuedCommissionRateChange_$80709_storage_ptr","typeString":"struct IBeraChef.QueuedCommissionRateChange"}},"visibility":"internal"}],"src":"8734:35:142"},"scope":80954,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":80862,"nodeType":"FunctionDefinition","src":"9089:100:142","nodes":[],"documentation":{"id":80855,"nodeType":"StructuredDocumentation","src":"8776:308:142","text":" @notice Returns the commission rate of a validator on an incentive tokens.\n @dev Default commission rate is 5% if the commission was never set.\n @param valPubkey The validator's pubkey.\n @return commissionRate The commission rate of the validator on the incentive tokens."},"functionSelector":"61b8b560","implemented":false,"kind":"function","modifiers":[],"name":"getValCommissionOnIncentiveTokens","nameLocation":"9098:33:142","parameters":{"id":80858,"nodeType":"ParameterList","parameters":[{"constant":false,"id":80857,"mutability":"mutable","name":"valPubkey","nameLocation":"9147:9:142","nodeType":"VariableDeclaration","scope":80862,"src":"9132:24:142","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":80856,"name":"bytes","nodeType":"ElementaryTypeName","src":"9132:5:142","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"9131:26:142"},"returnParameters":{"id":80861,"nodeType":"ParameterList","parameters":[{"constant":false,"id":80860,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":80862,"src":"9181:6:142","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":80859,"name":"uint96","nodeType":"ElementaryTypeName","src":"9181:6:142","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"src":"9180:8:142"},"scope":80954,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":80872,"nodeType":"FunctionDefinition","src":"9518:175:142","nodes":[],"documentation":{"id":80863,"nodeType":"StructuredDocumentation","src":"9195:318:142","text":" @notice Returns the validator's share of the incentive tokens based on the validator's commission rate.\n @param valPubkey The validator's pubkey.\n @param incentiveTokenAmount The amount of the incentive tokens.\n @return validatorShare The validator's share of the incentive tokens."},"functionSelector":"3909cbd5","implemented":false,"kind":"function","modifiers":[],"name":"getValidatorIncentiveTokenShare","nameLocation":"9527:31:142","parameters":{"id":80868,"nodeType":"ParameterList","parameters":[{"constant":false,"id":80865,"mutability":"mutable","name":"valPubkey","nameLocation":"9583:9:142","nodeType":"VariableDeclaration","scope":80872,"src":"9568:24:142","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":80864,"name":"bytes","nodeType":"ElementaryTypeName","src":"9568:5:142","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":80867,"mutability":"mutable","name":"incentiveTokenAmount","nameLocation":"9610:20:142","nodeType":"VariableDeclaration","scope":80872,"src":"9602:28:142","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":80866,"name":"uint256","nodeType":"ElementaryTypeName","src":"9602:7:142","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9558:78:142"},"returnParameters":{"id":80871,"nodeType":"ParameterList","parameters":[{"constant":false,"id":80870,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":80872,"src":"9684:7:142","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":80869,"name":"uint256","nodeType":"ElementaryTypeName","src":"9684:7:142","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9683:9:142"},"scope":80954,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":80878,"nodeType":"FunctionDefinition","src":"10056:95:142","nodes":[],"documentation":{"id":80873,"nodeType":"StructuredDocumentation","src":"9982:69:142","text":"@notice Sets the maximum number of weights per reward allocation."},"functionSelector":"66204c78","implemented":false,"kind":"function","modifiers":[],"name":"setMaxNumWeightsPerRewardAllocation","nameLocation":"10065:35:142","parameters":{"id":80876,"nodeType":"ParameterList","parameters":[{"constant":false,"id":80875,"mutability":"mutable","name":"_maxNumWeightsPerRewardAllocation","nameLocation":"10107:33:142","nodeType":"VariableDeclaration","scope":80878,"src":"10101:39:142","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":80874,"name":"uint8","nodeType":"ElementaryTypeName","src":"10101:5:142","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"10100:41:142"},"returnParameters":{"id":80877,"nodeType":"ParameterList","parameters":[],"src":"10150:0:142"},"scope":80954,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":80884,"nodeType":"FunctionDefinition","src":"10240:66:142","nodes":[],"documentation":{"id":80879,"nodeType":"StructuredDocumentation","src":"10157:78:142","text":"@notice Sets the maximum weight a vault can assume in a reward allocation."},"functionSelector":"25fb3c42","implemented":false,"kind":"function","modifiers":[],"name":"setMaxWeightPerVault","nameLocation":"10249:20:142","parameters":{"id":80882,"nodeType":"ParameterList","parameters":[{"constant":false,"id":80881,"mutability":"mutable","name":"_maxWeightPerVault","nameLocation":"10277:18:142","nodeType":"VariableDeclaration","scope":80884,"src":"10270:25:142","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":80880,"name":"uint96","nodeType":"ElementaryTypeName","src":"10270:6:142","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"src":"10269:27:142"},"returnParameters":{"id":80883,"nodeType":"ParameterList","parameters":[],"src":"10305:0:142"},"scope":80954,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":80890,"nodeType":"FunctionDefinition","src":"10399:84:142","nodes":[],"documentation":{"id":80885,"nodeType":"StructuredDocumentation","src":"10312:82:142","text":"@notice Sets the delay in blocks before a new reward allocation can be queued."},"functionSelector":"9ca2626c","implemented":false,"kind":"function","modifiers":[],"name":"setRewardAllocationBlockDelay","nameLocation":"10408:29:142","parameters":{"id":80888,"nodeType":"ParameterList","parameters":[{"constant":false,"id":80887,"mutability":"mutable","name":"_rewardAllocationBlockDelay","nameLocation":"10445:27:142","nodeType":"VariableDeclaration","scope":80890,"src":"10438:34:142","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":80886,"name":"uint64","nodeType":"ElementaryTypeName","src":"10438:6:142","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"10437:36:142"},"returnParameters":{"id":80889,"nodeType":"ParameterList","parameters":[],"src":"10482:0:142"},"scope":80954,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":80900,"nodeType":"FunctionDefinition","src":"10875:106:142","nodes":[],"documentation":{"id":80891,"nodeType":"StructuredDocumentation","src":"10489:381:142","text":" @notice Updates the vault's whitelisted status\n @notice The caller of this function must be the governance module account.\n @param receiver The address to remove or add as whitelisted vault.\n @param isWhitelisted The whitelist status; true if the receiver is being whitelisted, false otherwise.\n @param metadata The metadata of the vault."},"functionSelector":"fb9f6fde","implemented":false,"kind":"function","modifiers":[],"name":"setVaultWhitelistedStatus","nameLocation":"10884:25:142","parameters":{"id":80898,"nodeType":"ParameterList","parameters":[{"constant":false,"id":80893,"mutability":"mutable","name":"receiver","nameLocation":"10918:8:142","nodeType":"VariableDeclaration","scope":80900,"src":"10910:16:142","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":80892,"name":"address","nodeType":"ElementaryTypeName","src":"10910:7:142","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":80895,"mutability":"mutable","name":"isWhitelisted","nameLocation":"10933:13:142","nodeType":"VariableDeclaration","scope":80900,"src":"10928:18:142","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":80894,"name":"bool","nodeType":"ElementaryTypeName","src":"10928:4:142","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":80897,"mutability":"mutable","name":"metadata","nameLocation":"10962:8:142","nodeType":"VariableDeclaration","scope":80900,"src":"10948:22:142","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":80896,"name":"string","nodeType":"ElementaryTypeName","src":"10948:6:142","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"10909:62:142"},"returnParameters":{"id":80899,"nodeType":"ParameterList","parameters":[],"src":"10980:0:142"},"scope":80954,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":80908,"nodeType":"FunctionDefinition","src":"11345:91:142","nodes":[],"documentation":{"id":80901,"nodeType":"StructuredDocumentation","src":"10987:353:142","text":" @notice Updates the metadata of a whitelisted vault, reverts if vault is not whitelisted.\n @notice The caller of this function must be the governance module account.\n @param receiver The address of the whitelisted vault.\n @param metadata The metadata of the vault, to associate info with the vault in the events log."},"functionSelector":"69ed1708","implemented":false,"kind":"function","modifiers":[],"name":"updateWhitelistedVaultMetadata","nameLocation":"11354:30:142","parameters":{"id":80906,"nodeType":"ParameterList","parameters":[{"constant":false,"id":80903,"mutability":"mutable","name":"receiver","nameLocation":"11393:8:142","nodeType":"VariableDeclaration","scope":80908,"src":"11385:16:142","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":80902,"name":"address","nodeType":"ElementaryTypeName","src":"11385:7:142","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":80905,"mutability":"mutable","name":"metadata","nameLocation":"11417:8:142","nodeType":"VariableDeclaration","scope":80908,"src":"11403:22:142","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":80904,"name":"string","nodeType":"ElementaryTypeName","src":"11403:6:142","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"11384:42:142"},"returnParameters":{"id":80907,"nodeType":"ParameterList","parameters":[],"src":"11435:0:142"},"scope":80954,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":80915,"nodeType":"FunctionDefinition","src":"11702:89:142","nodes":[],"documentation":{"id":80909,"nodeType":"StructuredDocumentation","src":"11442:255:142","text":" @notice Sets the default reward allocation for validators that do not have a reward allocation.\n @dev The caller of this function must be the governance module account.\n @param rewardAllocation The default reward allocation."},"functionSelector":"c89f2665","implemented":false,"kind":"function","modifiers":[],"name":"setDefaultRewardAllocation","nameLocation":"11711:26:142","parameters":{"id":80913,"nodeType":"ParameterList","parameters":[{"constant":false,"id":80912,"mutability":"mutable","name":"rewardAllocation","nameLocation":"11764:16:142","nodeType":"VariableDeclaration","scope":80915,"src":"11738:42:142","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_RewardAllocation_$80697_calldata_ptr","typeString":"struct IBeraChef.RewardAllocation"},"typeName":{"id":80911,"nodeType":"UserDefinedTypeName","pathNode":{"id":80910,"name":"RewardAllocation","nameLocations":["11738:16:142"],"nodeType":"IdentifierPath","referencedDeclaration":80697,"src":"11738:16:142"},"referencedDeclaration":80697,"src":"11738:16:142","typeDescriptions":{"typeIdentifier":"t_struct$_RewardAllocation_$80697_storage_ptr","typeString":"struct IBeraChef.RewardAllocation"}},"visibility":"internal"}],"src":"11737:44:142"},"returnParameters":{"id":80914,"nodeType":"ParameterList","parameters":[],"src":"11790:0:142"},"scope":80954,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":80927,"nodeType":"FunctionDefinition","src":"12573:153:142","nodes":[],"documentation":{"id":80916,"nodeType":"StructuredDocumentation","src":"12080:488:142","text":" @notice Add a new reward allocation to the queue for validator with given pubkey. Does not allow overwriting of\n existing queued reward allocation.\n @dev The weights of the reward allocation must add up to 100% or 1e4.\n Only whitelisted pools may be used as well.\n @param valPubkey The validator's pubkey.\n @param startBlock The block that the reward allocation goes into effect.\n @param weights The weights of the reward allocation."},"functionSelector":"e5eb90aa","implemented":false,"kind":"function","modifiers":[],"name":"queueNewRewardAllocation","nameLocation":"12582:24:142","parameters":{"id":80925,"nodeType":"ParameterList","parameters":[{"constant":false,"id":80918,"mutability":"mutable","name":"valPubkey","nameLocation":"12631:9:142","nodeType":"VariableDeclaration","scope":80927,"src":"12616:24:142","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":80917,"name":"bytes","nodeType":"ElementaryTypeName","src":"12616:5:142","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":80920,"mutability":"mutable","name":"startBlock","nameLocation":"12657:10:142","nodeType":"VariableDeclaration","scope":80927,"src":"12650:17:142","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":80919,"name":"uint64","nodeType":"ElementaryTypeName","src":"12650:6:142","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":80924,"mutability":"mutable","name":"weights","nameLocation":"12695:7:142","nodeType":"VariableDeclaration","scope":80927,"src":"12677:25:142","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Weight_$80703_calldata_ptr_$dyn_calldata_ptr","typeString":"struct IBeraChef.Weight[]"},"typeName":{"baseType":{"id":80922,"nodeType":"UserDefinedTypeName","pathNode":{"id":80921,"name":"Weight","nameLocations":["12677:6:142"],"nodeType":"IdentifierPath","referencedDeclaration":80703,"src":"12677:6:142"},"referencedDeclaration":80703,"src":"12677:6:142","typeDescriptions":{"typeIdentifier":"t_struct$_Weight_$80703_storage_ptr","typeString":"struct IBeraChef.Weight"}},"id":80923,"nodeType":"ArrayTypeName","src":"12677:8:142","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Weight_$80703_storage_$dyn_storage_ptr","typeString":"struct IBeraChef.Weight[]"}},"visibility":"internal"}],"src":"12606:102:142"},"returnParameters":{"id":80926,"nodeType":"ParameterList","parameters":[],"src":"12725:0:142"},"scope":80954,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":80933,"nodeType":"FunctionDefinition","src":"12961:80:142","nodes":[],"documentation":{"id":80928,"nodeType":"StructuredDocumentation","src":"12732:224:142","text":" @notice Activates the queued reward allocation for a validator if its ready for the current block.\n @dev Should be called by the distribution contract.\n @param valPubkey The validator's pubkey."},"functionSelector":"6ed0bf9a","implemented":false,"kind":"function","modifiers":[],"name":"activateReadyQueuedRewardAllocation","nameLocation":"12970:35:142","parameters":{"id":80931,"nodeType":"ParameterList","parameters":[{"constant":false,"id":80930,"mutability":"mutable","name":"valPubkey","nameLocation":"13021:9:142","nodeType":"VariableDeclaration","scope":80933,"src":"13006:24:142","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":80929,"name":"bytes","nodeType":"ElementaryTypeName","src":"13006:5:142","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"13005:26:142"},"returnParameters":{"id":80932,"nodeType":"ParameterList","parameters":[],"src":"13040:0:142"},"scope":80954,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":80939,"nodeType":"FunctionDefinition","src":"13256:74:142","nodes":[],"documentation":{"id":80934,"nodeType":"StructuredDocumentation","src":"13047:204:142","text":" @notice Sets the commission change delay.\n @dev Only owner can call this function.\n @param _commissionChangeDelay The delay in blocks to activate a queued commission change."},"functionSelector":"7239e8ca","implemented":false,"kind":"function","modifiers":[],"name":"setCommissionChangeDelay","nameLocation":"13265:24:142","parameters":{"id":80937,"nodeType":"ParameterList","parameters":[{"constant":false,"id":80936,"mutability":"mutable","name":"_commissionChangeDelay","nameLocation":"13297:22:142","nodeType":"VariableDeclaration","scope":80939,"src":"13290:29:142","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":80935,"name":"uint64","nodeType":"ElementaryTypeName","src":"13290:6:142","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"13289:31:142"},"returnParameters":{"id":80938,"nodeType":"ParameterList","parameters":[],"src":"13329:0:142"},"scope":80954,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":80947,"nodeType":"FunctionDefinition","src":"13721:86:142","nodes":[],"documentation":{"id":80940,"nodeType":"StructuredDocumentation","src":"13336:380:142","text":" @notice Queues a commission rate change for a validator on incentive tokens.\n @dev The caller of this function must be the validator operator address.\n @dev Revert if already a commission rate change is queued.\n @param valPubkey The validator's pubkey.\n @param commissionRate The commission rate of the validator on the incentive tokens."},"functionSelector":"8f7e0f0b","implemented":false,"kind":"function","modifiers":[],"name":"queueValCommission","nameLocation":"13730:18:142","parameters":{"id":80945,"nodeType":"ParameterList","parameters":[{"constant":false,"id":80942,"mutability":"mutable","name":"valPubkey","nameLocation":"13764:9:142","nodeType":"VariableDeclaration","scope":80947,"src":"13749:24:142","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":80941,"name":"bytes","nodeType":"ElementaryTypeName","src":"13749:5:142","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":80944,"mutability":"mutable","name":"commissionRate","nameLocation":"13782:14:142","nodeType":"VariableDeclaration","scope":80947,"src":"13775:21:142","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":80943,"name":"uint96","nodeType":"ElementaryTypeName","src":"13775:6:142","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"src":"13748:49:142"},"returnParameters":{"id":80946,"nodeType":"ParameterList","parameters":[],"src":"13806:0:142"},"scope":80954,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":80953,"nodeType":"FunctionDefinition","src":"13965:72:142","nodes":[],"documentation":{"id":80948,"nodeType":"StructuredDocumentation","src":"13813:147:142","text":" @notice Activates the queued commission rate of a validator on incentive tokens.\n @param valPubkey The validator's pubkey."},"functionSelector":"37e4c5bf","implemented":false,"kind":"function","modifiers":[],"name":"activateQueuedValCommission","nameLocation":"13974:27:142","parameters":{"id":80951,"nodeType":"ParameterList","parameters":[{"constant":false,"id":80950,"mutability":"mutable","name":"valPubkey","nameLocation":"14017:9:142","nodeType":"VariableDeclaration","scope":80953,"src":"14002:24:142","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":80949,"name":"bytes","nodeType":"ElementaryTypeName","src":"14002:5:142","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"14001:26:142"},"returnParameters":{"id":80952,"nodeType":"ParameterList","parameters":[],"src":"14036:0:142"},"scope":80954,"stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"abstract":false,"baseContracts":[{"baseName":{"id":80688,"name":"IPOLErrors","nameLocations":["179:10:142"],"nodeType":"IdentifierPath","referencedDeclaration":81420,"src":"179:10:142"},"id":80689,"nodeType":"InheritanceSpecifier","src":"179:10:142"}],"canonicalName":"IBeraChef","contractDependencies":[],"contractKind":"interface","documentation":{"id":80687,"nodeType":"StructuredDocumentation","src":"111:45:142","text":"@notice Interface of the BeraChef module"},"fullyImplemented":false,"linearizedBaseContracts":[80954,81420,68947],"name":"IBeraChef","nameLocation":"166:9:142","scope":80955,"usedErrors":[68934,68936,68938,68940,68942,68944,68946,81272,81274,81276,81278,81280,81282,81284,81286,81288,81290,81292,81294,81296,81298,81300,81302,81304,81306,81308,81310,81312,81314,81316,81318,81320,81322,81324,81326,81328,81330,81332,81334,81336,81338,81340,81342,81344,81346,81348,81350,81352,81354,81356,81358,81360,81362,81364,81366,81368,81370,81372,81374,81376,81378,81381,81384,81387,81390,81393,81396,81399,81402,81405,81407,81409,81411,81413,81415,81417,81419],"usedEvents":[80720,80725,80730,80739,80746,80757,80768,80774,80779,80786,80795]}],"license":"BUSL-1.1"},"id":142}